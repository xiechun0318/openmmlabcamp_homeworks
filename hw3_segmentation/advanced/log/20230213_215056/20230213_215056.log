2023/02/13 21:51:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 713230944
    GPU 0: NVIDIA GeForce RTX 3080
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    MSVC: Microsoft(R) C/C++ Optimizing Compiler Version 19.29.30038.1 for x64
    GCC: n/a
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/13 21:51:01 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True, momentum=0.01)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 512))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 512)),
    backbone=dict(
        type='FastSCNN',
        downsample_dw_channels=(32, 48),
        global_in_channels=64,
        global_block_channels=(64, 96, 128),
        global_block_strides=(2, 2, 1),
        global_out_channels=128,
        higher_in_channels=64,
        lower_in_channels=128,
        fusion_out_channels=128,
        out_indices=(0, 1, 2),
        norm_cfg=dict(type='SyncBN', requires_grad=True, momentum=0.01),
        align_corners=False),
    decode_head=dict(
        type='DepthwiseSeparableFCNHead',
        in_channels=128,
        channels=128,
        concat_input=False,
        num_classes=21,
        in_index=-1,
        norm_cfg=dict(type='SyncBN', requires_grad=True, momentum=0.01),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1)),
    auxiliary_head=[
        dict(
            type='FCNHead',
            in_channels=128,
            channels=32,
            num_convs=1,
            num_classes=21,
            in_index=-2,
            norm_cfg=dict(type='BN', requires_grad=True, momentum=0.01),
            concat_input=False,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='FCNHead',
            in_channels=64,
            channels=32,
            num_convs=1,
            num_classes=21,
            in_index=-3,
            norm_cfg=dict(type='BN', requires_grad=True, momentum=0.01),
            concat_input=False,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.4))
    ],
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = 'data/VOCdevkit/VOC2012'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 512),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 512), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 512),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = './fast_scnn_lr0.12_8x4_160k_cityscapes_20210630_164853-0cec9937.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=4e-05)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=4e-05),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=20000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=20000, val_interval=2000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=200, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=2000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs/advanced'

2023/02/13 21:51:01 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:01 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/13 21:51:02 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/13 21:51:02 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:02 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:11 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:11 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:11 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:11 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:11 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 21:51:12 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
Name of parameter - Initialization information

backbone.learning_to_downsample.conv.conv.weight - torch.Size([32, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.depthwise_conv.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv1.depthwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.depthwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.pointwise_conv.conv.weight - torch.Size([48, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv1.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.depthwise_conv.conv.weight - torch.Size([48, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.pointwise_conv.conv.weight - torch.Size([64, 48, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv2.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.2.conv.weight - torch.Size([128, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.0.conv.weight - torch.Size([768, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.1.conv.weight - torch.Size([768, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.2.conv.weight - torch.Size([128, 768, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.0.conv.weight - torch.Size([768, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.1.conv.weight - torch.Size([768, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.2.conv.weight - torch.Size([128, 768, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.0.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.0.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.0.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.1.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.1.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.1.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.2.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.2.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.2.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.3.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.3.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.3.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.out.conv.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.out.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.out.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.dwconv.conv.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.dwconv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.dwconv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_lower_res.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.conv_lower_res.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_lower_res.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_higher_res.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.conv_higher_res.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_higher_res.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([21, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.weight - torch.Size([21, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.conv.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.weight - torch.Size([21, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.conv.weight - torch.Size([32, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/13 21:51:12 - mmengine - INFO - Load checkpoint from ./fast_scnn_lr0.12_8x4_160k_cityscapes_20210630_164853-0cec9937.pth
2023/02/13 21:51:12 - mmengine - INFO - Checkpoints will be saved to D:\workspace\openmmlab_tutorial\mmsegmentation\work_dirs\advanced.
2023/02/13 21:51:36 - mmengine - INFO - Iter(train) [  200/20000]  lr: 9.9113e-03  eta: 0:39:34  time: 0.1055  data_time: 0.0033  memory: 1827  loss: 0.2279  decode.loss_ce: 0.0943  decode.acc_seg: 77.2946  aux_0.loss_ce: 0.0562  aux_0.acc_seg: 78.7804  aux_1.loss_ce: 0.0773  aux_1.acc_seg: 76.9759
2023/02/13 21:51:54 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 21:51:58 - mmengine - INFO - Iter(train) [  400/20000]  lr: 9.8221e-03  eta: 0:36:59  time: 0.1057  data_time: 0.0032  memory: 1827  loss: 0.1826  decode.loss_ce: 0.0915  decode.acc_seg: 54.7383  aux_0.loss_ce: 0.0411  aux_0.acc_seg: 54.9844  aux_1.loss_ce: 0.0501  aux_1.acc_seg: 55.2227
2023/02/13 21:52:19 - mmengine - INFO - Iter(train) [  600/20000]  lr: 9.7327e-03  eta: 0:35:55  time: 0.1052  data_time: 0.0034  memory: 1827  loss: 0.1547  decode.loss_ce: 0.0784  decode.acc_seg: 58.1706  aux_0.loss_ce: 0.0341  aux_0.acc_seg: 58.0645  aux_1.loss_ce: 0.0422  aux_1.acc_seg: 56.6001
2023/02/13 21:52:40 - mmengine - INFO - Iter(train) [  800/20000]  lr: 9.6433e-03  eta: 0:35:07  time: 0.1072  data_time: 0.0036  memory: 1827  loss: 0.1549  decode.loss_ce: 0.0804  decode.acc_seg: 76.1343  aux_0.loss_ce: 0.0341  aux_0.acc_seg: 75.2528  aux_1.loss_ce: 0.0404  aux_1.acc_seg: 79.1968
2023/02/13 21:53:02 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 21:53:02 - mmengine - INFO - Iter(train) [ 1000/20000]  lr: 9.5538e-03  eta: 0:34:34  time: 0.1037  data_time: 0.0035  memory: 1827  loss: 0.1603  decode.loss_ce: 0.0852  decode.acc_seg: 48.9040  aux_0.loss_ce: 0.0348  aux_0.acc_seg: 50.7322  aux_1.loss_ce: 0.0403  aux_1.acc_seg: 51.6458
2023/02/13 21:53:23 - mmengine - INFO - Iter(train) [ 1200/20000]  lr: 9.4642e-03  eta: 0:34:03  time: 0.1073  data_time: 0.0032  memory: 1827  loss: 0.1422  decode.loss_ce: 0.0735  decode.acc_seg: 57.9100  aux_0.loss_ce: 0.0306  aux_0.acc_seg: 57.7001  aux_1.loss_ce: 0.0381  aux_1.acc_seg: 52.0231
2023/02/13 21:53:44 - mmengine - INFO - Iter(train) [ 1400/20000]  lr: 9.3745e-03  eta: 0:33:35  time: 0.1069  data_time: 0.0031  memory: 1828  loss: 0.1484  decode.loss_ce: 0.0780  decode.acc_seg: 64.2266  aux_0.loss_ce: 0.0318  aux_0.acc_seg: 68.6364  aux_1.loss_ce: 0.0385  aux_1.acc_seg: 65.9609
2023/02/13 21:54:05 - mmengine - INFO - Iter(train) [ 1600/20000]  lr: 9.2847e-03  eta: 0:33:09  time: 0.1062  data_time: 0.0033  memory: 1827  loss: 0.1446  decode.loss_ce: 0.0767  decode.acc_seg: 70.6400  aux_0.loss_ce: 0.0310  aux_0.acc_seg: 70.0113  aux_1.loss_ce: 0.0369  aux_1.acc_seg: 70.3979
2023/02/13 21:54:27 - mmengine - INFO - Iter(train) [ 1800/20000]  lr: 9.1948e-03  eta: 0:32:46  time: 0.1066  data_time: 0.0034  memory: 1828  loss: 0.1371  decode.loss_ce: 0.0712  decode.acc_seg: 74.8517  aux_0.loss_ce: 0.0295  aux_0.acc_seg: 77.0413  aux_1.loss_ce: 0.0363  aux_1.acc_seg: 80.2895
2023/02/13 21:54:48 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 21:54:48 - mmengine - INFO - Iter(train) [ 2000/20000]  lr: 9.1048e-03  eta: 0:32:21  time: 0.1059  data_time: 0.0030  memory: 1827  loss: 0.1644  decode.loss_ce: 0.0872  decode.acc_seg: 62.5744  aux_0.loss_ce: 0.0347  aux_0.acc_seg: 62.5894  aux_1.loss_ce: 0.0425  aux_1.acc_seg: 52.4075
2023/02/13 21:54:48 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/02/13 21:55:13 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:02:29  time: 0.0698  data_time: 0.0008  memory: 4201  
2023/02/13 21:55:18 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:17  time: 0.0541  data_time: 0.0009  memory: 3165  
2023/02/13 21:55:25 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:51  time: 0.0181  data_time: 0.0006  memory: 4206  
2023/02/13 21:55:31 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:34  time: 0.1478  data_time: 0.0007  memory: 4196  
2023/02/13 21:55:36 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:21  time: 0.0338  data_time: 0.0005  memory: 3166  
2023/02/13 21:55:40 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:10  time: 0.0329  data_time: 0.0008  memory: 4199  
2023/02/13 21:55:43 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:01  time: 0.0124  data_time: 0.0006  memory: 4197  
2023/02/13 21:55:44 - mmengine - INFO - per class results:
2023/02/13 21:55:44 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 81.89 | 97.57 |
|  aeroplane  |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.0  |  0.0  |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 23.16 | 83.14 |
|     car     |  0.01 |  0.01 |
|     cat     | 11.52 | 16.49 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.0  |  0.0  |
| diningtable |  0.0  |  0.0  |
|     dog     |  0.0  |  0.0  |
|    horse    |  0.0  |  0.0  |
|  motorbike  |  0.0  |  0.0  |
|    person   |  39.8 |  65.9 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  0.0  |  0.0  |
|     sofa    |  0.0  |  0.0  |
|    train    |  0.0  |  0.0  |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023/02/13 21:55:44 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 76.8900  mIoU: 7.4500  mAcc: 12.5300
2023/02/13 21:56:05 - mmengine - INFO - Iter(train) [ 2200/20000]  lr: 9.0147e-03  eta: 0:31:58  time: 0.1039  data_time: 0.0032  memory: 3165  loss: 0.1317  decode.loss_ce: 0.0694  decode.acc_seg: 79.1292  aux_0.loss_ce: 0.0281  aux_0.acc_seg: 66.7536  aux_1.loss_ce: 0.0342  aux_1.acc_seg: 63.5205
2023/02/13 21:56:27 - mmengine - INFO - Iter(train) [ 2400/20000]  lr: 8.9245e-03  eta: 0:31:33  time: 0.1096  data_time: 0.0038  memory: 1827  loss: 0.1198  decode.loss_ce: 0.0607  decode.acc_seg: 55.5608  aux_0.loss_ce: 0.0249  aux_0.acc_seg: 56.1113  aux_1.loss_ce: 0.0342  aux_1.acc_seg: 49.8896
2023/02/13 21:56:48 - mmengine - INFO - Iter(train) [ 2600/20000]  lr: 8.8342e-03  eta: 0:31:09  time: 0.1034  data_time: 0.0032  memory: 1827  loss: 0.1399  decode.loss_ce: 0.0738  decode.acc_seg: 68.5067  aux_0.loss_ce: 0.0296  aux_0.acc_seg: 69.1667  aux_1.loss_ce: 0.0366  aux_1.acc_seg: 49.6628
2023/02/13 21:57:09 - mmengine - INFO - Iter(train) [ 2800/20000]  lr: 8.7438e-03  eta: 0:30:46  time: 0.1068  data_time: 0.0037  memory: 1827  loss: 0.1345  decode.loss_ce: 0.0707  decode.acc_seg: 65.1586  aux_0.loss_ce: 0.0285  aux_0.acc_seg: 69.5113  aux_1.loss_ce: 0.0353  aux_1.acc_seg: 69.0441
2023/02/13 21:57:30 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 21:57:30 - mmengine - INFO - Iter(train) [ 3000/20000]  lr: 8.6533e-03  eta: 0:30:23  time: 0.1046  data_time: 0.0030  memory: 1827  loss: 0.1212  decode.loss_ce: 0.0633  decode.acc_seg: 66.6133  aux_0.loss_ce: 0.0259  aux_0.acc_seg: 65.5417  aux_1.loss_ce: 0.0320  aux_1.acc_seg: 63.3763
2023/02/13 21:57:51 - mmengine - INFO - Iter(train) [ 3200/20000]  lr: 8.5626e-03  eta: 0:30:00  time: 0.1073  data_time: 0.0035  memory: 1827  loss: 0.1249  decode.loss_ce: 0.0634  decode.acc_seg: 72.6087  aux_0.loss_ce: 0.0259  aux_0.acc_seg: 73.4262  aux_1.loss_ce: 0.0355  aux_1.acc_seg: 74.8782
2023/02/13 21:58:13 - mmengine - INFO - Iter(train) [ 3400/20000]  lr: 8.4719e-03  eta: 0:29:38  time: 0.1060  data_time: 0.0034  memory: 1827  loss: 0.1329  decode.loss_ce: 0.0706  decode.acc_seg: 84.0191  aux_0.loss_ce: 0.0273  aux_0.acc_seg: 83.0248  aux_1.loss_ce: 0.0350  aux_1.acc_seg: 79.5345
2023/02/13 21:58:34 - mmengine - INFO - Iter(train) [ 3600/20000]  lr: 8.3811e-03  eta: 0:29:16  time: 0.1043  data_time: 0.0032  memory: 1827  loss: 0.1337  decode.loss_ce: 0.0698  decode.acc_seg: 75.9138  aux_0.loss_ce: 0.0286  aux_0.acc_seg: 75.7474  aux_1.loss_ce: 0.0353  aux_1.acc_seg: 69.3667
2023/02/13 21:58:55 - mmengine - INFO - Iter(train) [ 3800/20000]  lr: 8.2901e-03  eta: 0:28:53  time: 0.1078  data_time: 0.0034  memory: 1827  loss: 0.1182  decode.loss_ce: 0.0598  decode.acc_seg: 65.4570  aux_0.loss_ce: 0.0242  aux_0.acc_seg: 64.4472  aux_1.loss_ce: 0.0343  aux_1.acc_seg: 48.3002
2023/02/13 21:59:16 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 21:59:16 - mmengine - INFO - Iter(train) [ 4000/20000]  lr: 8.1991e-03  eta: 0:28:31  time: 0.1029  data_time: 0.0036  memory: 1827  loss: 0.1197  decode.loss_ce: 0.0618  decode.acc_seg: 63.4159  aux_0.loss_ce: 0.0254  aux_0.acc_seg: 64.8546  aux_1.loss_ce: 0.0325  aux_1.acc_seg: 63.0256
2023/02/13 21:59:16 - mmengine - INFO - Saving checkpoint at 4000 iterations
2023/02/13 21:59:19 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:14  time: 0.0126  data_time: 0.0007  memory: 96  
2023/02/13 21:59:22 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0130  data_time: 0.0007  memory: 76  
2023/02/13 21:59:24 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:10  time: 0.0123  data_time: 0.0008  memory: 110  
2023/02/13 21:59:26 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0107  data_time: 0.0007  memory: 81  
2023/02/13 21:59:29 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0107  data_time: 0.0006  memory: 77  
2023/02/13 21:59:31 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:02  time: 0.0125  data_time: 0.0006  memory: 88  
2023/02/13 21:59:33 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0119  data_time: 0.0007  memory: 83  
2023/02/13 21:59:34 - mmengine - INFO - per class results:
2023/02/13 21:59:34 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 83.22 | 97.63 |
|  aeroplane  |  2.42 |  2.43 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.0  |  0.0  |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 29.32 | 60.84 |
|     car     | 11.69 | 17.65 |
|     cat     | 26.81 | 66.29 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.0  |  0.0  |
| diningtable |  0.0  |  0.0  |
|     dog     |  0.49 |  0.55 |
|    horse    |  0.0  |  0.0  |
|  motorbike  | 16.99 | 19.25 |
|    person   | 47.99 | 69.68 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  0.0  |  0.0  |
|     sofa    |  0.0  |  0.0  |
|    train    |  0.01 |  0.01 |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023/02/13 21:59:34 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 78.3900  mIoU: 10.4300  mAcc: 15.9200
2023/02/13 21:59:55 - mmengine - INFO - Iter(train) [ 4200/20000]  lr: 8.1079e-03  eta: 0:28:09  time: 0.1060  data_time: 0.0033  memory: 1827  loss: 0.1309  decode.loss_ce: 0.0672  decode.acc_seg: 85.9469  aux_0.loss_ce: 0.0275  aux_0.acc_seg: 84.4927  aux_1.loss_ce: 0.0363  aux_1.acc_seg: 76.4939
2023/02/13 22:00:17 - mmengine - INFO - Iter(train) [ 4400/20000]  lr: 8.0166e-03  eta: 0:27:47  time: 0.1057  data_time: 0.0033  memory: 1827  loss: 0.1240  decode.loss_ce: 0.0635  decode.acc_seg: 77.8038  aux_0.loss_ce: 0.0253  aux_0.acc_seg: 78.2372  aux_1.loss_ce: 0.0352  aux_1.acc_seg: 69.0746
2023/02/13 22:00:38 - mmengine - INFO - Iter(train) [ 4600/20000]  lr: 7.9252e-03  eta: 0:27:25  time: 0.1052  data_time: 0.0034  memory: 1827  loss: 0.1361  decode.loss_ce: 0.0699  decode.acc_seg: 66.7410  aux_0.loss_ce: 0.0284  aux_0.acc_seg: 68.3499  aux_1.loss_ce: 0.0378  aux_1.acc_seg: 69.2608
2023/02/13 22:00:59 - mmengine - INFO - Iter(train) [ 4800/20000]  lr: 7.8337e-03  eta: 0:27:03  time: 0.1060  data_time: 0.0037  memory: 1827  loss: 0.1163  decode.loss_ce: 0.0587  decode.acc_seg: 84.5263  aux_0.loss_ce: 0.0232  aux_0.acc_seg: 85.6174  aux_1.loss_ce: 0.0344  aux_1.acc_seg: 72.7109
2023/02/13 22:01:20 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:01:20 - mmengine - INFO - Iter(train) [ 5000/20000]  lr: 7.7421e-03  eta: 0:26:41  time: 0.1053  data_time: 0.0034  memory: 1827  loss: 0.1288  decode.loss_ce: 0.0658  decode.acc_seg: 88.3090  aux_0.loss_ce: 0.0277  aux_0.acc_seg: 87.2839  aux_1.loss_ce: 0.0353  aux_1.acc_seg: 73.2842
2023/02/13 22:01:41 - mmengine - INFO - Iter(train) [ 5200/20000]  lr: 7.6503e-03  eta: 0:26:19  time: 0.1080  data_time: 0.0033  memory: 1827  loss: 0.1240  decode.loss_ce: 0.0627  decode.acc_seg: 66.1394  aux_0.loss_ce: 0.0246  aux_0.acc_seg: 69.2147  aux_1.loss_ce: 0.0368  aux_1.acc_seg: 58.0277
2023/02/13 22:02:02 - mmengine - INFO - Iter(train) [ 5400/20000]  lr: 7.5584e-03  eta: 0:25:58  time: 0.1062  data_time: 0.0035  memory: 1827  loss: 0.1169  decode.loss_ce: 0.0592  decode.acc_seg: 62.2784  aux_0.loss_ce: 0.0240  aux_0.acc_seg: 63.5216  aux_1.loss_ce: 0.0337  aux_1.acc_seg: 53.5996
2023/02/13 22:02:24 - mmengine - INFO - Iter(train) [ 5600/20000]  lr: 7.4664e-03  eta: 0:25:36  time: 0.1048  data_time: 0.0038  memory: 1827  loss: 0.1193  decode.loss_ce: 0.0600  decode.acc_seg: 63.1690  aux_0.loss_ce: 0.0242  aux_0.acc_seg: 69.1500  aux_1.loss_ce: 0.0351  aux_1.acc_seg: 60.2160
2023/02/13 22:02:45 - mmengine - INFO - Iter(train) [ 5800/20000]  lr: 7.3742e-03  eta: 0:25:14  time: 0.1085  data_time: 0.0037  memory: 1827  loss: 0.1254  decode.loss_ce: 0.0636  decode.acc_seg: 80.7898  aux_0.loss_ce: 0.0260  aux_0.acc_seg: 75.7499  aux_1.loss_ce: 0.0358  aux_1.acc_seg: 67.0386
2023/02/13 22:03:06 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:03:06 - mmengine - INFO - Iter(train) [ 6000/20000]  lr: 7.2820e-03  eta: 0:24:52  time: 0.1033  data_time: 0.0032  memory: 1827  loss: 0.1274  decode.loss_ce: 0.0652  decode.acc_seg: 73.6874  aux_0.loss_ce: 0.0261  aux_0.acc_seg: 76.5534  aux_1.loss_ce: 0.0361  aux_1.acc_seg: 68.2336
2023/02/13 22:03:06 - mmengine - INFO - Saving checkpoint at 6000 iterations
2023/02/13 22:03:09 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:15  time: 0.0142  data_time: 0.0009  memory: 96  
2023/02/13 22:03:12 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:13  time: 0.0146  data_time: 0.0002  memory: 76  
2023/02/13 22:03:14 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:10  time: 0.0111  data_time: 0.0007  memory: 110  
2023/02/13 22:03:16 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:08  time: 0.0123  data_time: 0.0006  memory: 81  
2023/02/13 22:03:19 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0109  data_time: 0.0005  memory: 77  
2023/02/13 22:03:21 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0137  data_time: 0.0008  memory: 88  
2023/02/13 22:03:23 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0108  data_time: 0.0006  memory: 83  
2023/02/13 22:03:24 - mmengine - INFO - per class results:
2023/02/13 22:03:24 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 84.03 |  94.8 |
|  aeroplane  | 34.98 | 65.95 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.01 |  0.01 |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 44.83 | 80.84 |
|     car     | 40.82 | 46.39 |
|     cat     | 23.22 | 82.79 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.06 |  0.06 |
| diningtable |  0.0  |  0.0  |
|     dog     |  8.26 | 12.54 |
|    horse    | 18.16 | 37.45 |
|  motorbike  | 31.22 | 42.25 |
|    person   | 49.17 | 60.31 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  0.51 |  0.51 |
|     sofa    |  0.0  |  0.0  |
|    train    |  2.89 |  2.99 |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023/02/13 22:03:24 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 78.4300  mIoU: 16.1000  mAcc: 25.0900
2023/02/13 22:03:45 - mmengine - INFO - Iter(train) [ 6200/20000]  lr: 7.1896e-03  eta: 0:24:31  time: 0.1051  data_time: 0.0032  memory: 1827  loss: 0.1262  decode.loss_ce: 0.0646  decode.acc_seg: 55.1554  aux_0.loss_ce: 0.0266  aux_0.acc_seg: 53.9252  aux_1.loss_ce: 0.0349  aux_1.acc_seg: 53.4423
2023/02/13 22:04:06 - mmengine - INFO - Iter(train) [ 6400/20000]  lr: 7.0970e-03  eta: 0:24:09  time: 0.1051  data_time: 0.0033  memory: 1827  loss: 0.1265  decode.loss_ce: 0.0649  decode.acc_seg: 86.7103  aux_0.loss_ce: 0.0259  aux_0.acc_seg: 81.2093  aux_1.loss_ce: 0.0358  aux_1.acc_seg: 61.3376
2023/02/13 22:04:27 - mmengine - INFO - Iter(train) [ 6600/20000]  lr: 7.0043e-03  eta: 0:23:47  time: 0.1045  data_time: 0.0036  memory: 1827  loss: 0.1307  decode.loss_ce: 0.0671  decode.acc_seg: 53.9926  aux_0.loss_ce: 0.0273  aux_0.acc_seg: 56.3950  aux_1.loss_ce: 0.0362  aux_1.acc_seg: 61.4214
2023/02/13 22:04:49 - mmengine - INFO - Iter(train) [ 6800/20000]  lr: 6.9115e-03  eta: 0:23:26  time: 0.1062  data_time: 0.0032  memory: 1827  loss: 0.1097  decode.loss_ce: 0.0550  decode.acc_seg: 81.0608  aux_0.loss_ce: 0.0232  aux_0.acc_seg: 82.7310  aux_1.loss_ce: 0.0316  aux_1.acc_seg: 67.6283
2023/02/13 22:05:10 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:05:10 - mmengine - INFO - Iter(train) [ 7000/20000]  lr: 6.8186e-03  eta: 0:23:05  time: 0.1063  data_time: 0.0036  memory: 1827  loss: 0.1195  decode.loss_ce: 0.0598  decode.acc_seg: 57.8890  aux_0.loss_ce: 0.0251  aux_0.acc_seg: 59.2359  aux_1.loss_ce: 0.0346  aux_1.acc_seg: 44.6525
2023/02/13 22:05:31 - mmengine - INFO - Iter(train) [ 7200/20000]  lr: 6.7255e-03  eta: 0:22:43  time: 0.1080  data_time: 0.0037  memory: 1827  loss: 0.1506  decode.loss_ce: 0.0793  decode.acc_seg: 82.0434  aux_0.loss_ce: 0.0322  aux_0.acc_seg: 80.3924  aux_1.loss_ce: 0.0392  aux_1.acc_seg: 82.4985
2023/02/13 22:05:53 - mmengine - INFO - Iter(train) [ 7400/20000]  lr: 6.6322e-03  eta: 0:22:22  time: 0.1042  data_time: 0.0035  memory: 1827  loss: 0.1389  decode.loss_ce: 0.0718  decode.acc_seg: 76.5319  aux_0.loss_ce: 0.0287  aux_0.acc_seg: 76.6506  aux_1.loss_ce: 0.0384  aux_1.acc_seg: 58.4207
2023/02/13 22:06:14 - mmengine - INFO - Iter(train) [ 7600/20000]  lr: 6.5388e-03  eta: 0:22:01  time: 0.1069  data_time: 0.0035  memory: 1827  loss: 0.1257  decode.loss_ce: 0.0650  decode.acc_seg: 60.7425  aux_0.loss_ce: 0.0254  aux_0.acc_seg: 57.5354  aux_1.loss_ce: 0.0353  aux_1.acc_seg: 57.6022
2023/02/13 22:06:36 - mmengine - INFO - Iter(train) [ 7800/20000]  lr: 6.4453e-03  eta: 0:21:40  time: 0.1069  data_time: 0.0033  memory: 1827  loss: 0.1289  decode.loss_ce: 0.0641  decode.acc_seg: 88.7295  aux_0.loss_ce: 0.0262  aux_0.acc_seg: 86.5320  aux_1.loss_ce: 0.0386  aux_1.acc_seg: 70.4209
2023/02/13 22:06:57 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:06:57 - mmengine - INFO - Iter(train) [ 8000/20000]  lr: 6.3516e-03  eta: 0:21:19  time: 0.1094  data_time: 0.0033  memory: 1827  loss: 0.1043  decode.loss_ce: 0.0535  decode.acc_seg: 80.6231  aux_0.loss_ce: 0.0214  aux_0.acc_seg: 81.6977  aux_1.loss_ce: 0.0294  aux_1.acc_seg: 69.0044
2023/02/13 22:06:57 - mmengine - INFO - Saving checkpoint at 8000 iterations
2023/02/13 22:07:01 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:17  time: 0.0153  data_time: 0.0008  memory: 96  
2023/02/13 22:07:03 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:14  time: 0.0116  data_time: 0.0006  memory: 76  
2023/02/13 22:07:06 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:11  time: 0.0123  data_time: 0.0006  memory: 110  
2023/02/13 22:07:08 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:08  time: 0.0111  data_time: 0.0006  memory: 81  
2023/02/13 22:07:11 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0108  data_time: 0.0005  memory: 77  
2023/02/13 22:07:13 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0107  data_time: 0.0007  memory: 88  
2023/02/13 22:07:15 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0123  data_time: 0.0007  memory: 83  
2023/02/13 22:07:16 - mmengine - INFO - per class results:
2023/02/13 22:07:16 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 84.34 |  97.5 |
|  aeroplane  | 23.43 | 68.09 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.03 |  0.03 |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 48.67 | 79.55 |
|     car     | 49.91 |  60.9 |
|     cat     |  23.9 | 28.35 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.02 |  0.02 |
| diningtable |  0.0  |  0.0  |
|     dog     |  2.7  |  2.86 |
|    horse    |  17.6 | 48.07 |
|  motorbike  | 26.62 | 59.08 |
|    person   | 47.03 | 64.72 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  1.5  |  1.52 |
|     sofa    |  0.01 |  0.01 |
|    train    |  8.43 |  9.06 |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023/02/13 22:07:16 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 79.7700  mIoU: 15.9100  mAcc: 24.7500
2023/02/13 22:07:37 - mmengine - INFO - Iter(train) [ 8200/20000]  lr: 6.2577e-03  eta: 0:20:58  time: 0.1056  data_time: 0.0035  memory: 1827  loss: 0.1081  decode.loss_ce: 0.0525  decode.acc_seg: 84.1180  aux_0.loss_ce: 0.0219  aux_0.acc_seg: 81.0791  aux_1.loss_ce: 0.0337  aux_1.acc_seg: 65.6602
2023/02/13 22:07:59 - mmengine - INFO - Iter(train) [ 8400/20000]  lr: 6.1637e-03  eta: 0:20:37  time: 0.1063  data_time: 0.0032  memory: 1827  loss: 0.1179  decode.loss_ce: 0.0592  decode.acc_seg: 47.7476  aux_0.loss_ce: 0.0239  aux_0.acc_seg: 47.3158  aux_1.loss_ce: 0.0348  aux_1.acc_seg: 46.3298
2023/02/13 22:08:20 - mmengine - INFO - Iter(train) [ 8600/20000]  lr: 6.0696e-03  eta: 0:20:16  time: 0.1078  data_time: 0.0033  memory: 1827  loss: 0.1213  decode.loss_ce: 0.0598  decode.acc_seg: 64.3754  aux_0.loss_ce: 0.0249  aux_0.acc_seg: 66.8604  aux_1.loss_ce: 0.0366  aux_1.acc_seg: 53.5162
2023/02/13 22:08:41 - mmengine - INFO - Iter(train) [ 8800/20000]  lr: 5.9752e-03  eta: 0:19:54  time: 0.1056  data_time: 0.0035  memory: 1827  loss: 0.1226  decode.loss_ce: 0.0609  decode.acc_seg: 64.1536  aux_0.loss_ce: 0.0245  aux_0.acc_seg: 70.0870  aux_1.loss_ce: 0.0372  aux_1.acc_seg: 59.4475
2023/02/13 22:09:03 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:09:03 - mmengine - INFO - Iter(train) [ 9000/20000]  lr: 5.8807e-03  eta: 0:19:33  time: 0.1075  data_time: 0.0036  memory: 1827  loss: 0.0954  decode.loss_ce: 0.0461  decode.acc_seg: 72.0473  aux_0.loss_ce: 0.0188  aux_0.acc_seg: 71.8550  aux_1.loss_ce: 0.0305  aux_1.acc_seg: 67.5881
2023/02/13 22:09:24 - mmengine - INFO - Iter(train) [ 9200/20000]  lr: 5.7860e-03  eta: 0:19:12  time: 0.1077  data_time: 0.0032  memory: 1827  loss: 0.1163  decode.loss_ce: 0.0573  decode.acc_seg: 89.2212  aux_0.loss_ce: 0.0226  aux_0.acc_seg: 89.2366  aux_1.loss_ce: 0.0365  aux_1.acc_seg: 69.8105
2023/02/13 22:09:46 - mmengine - INFO - Iter(train) [ 9400/20000]  lr: 5.6912e-03  eta: 0:18:51  time: 0.1060  data_time: 0.0032  memory: 1827  loss: 0.1159  decode.loss_ce: 0.0584  decode.acc_seg: 92.3960  aux_0.loss_ce: 0.0237  aux_0.acc_seg: 95.0400  aux_1.loss_ce: 0.0338  aux_1.acc_seg: 71.6354
2023/02/13 22:10:07 - mmengine - INFO - Iter(train) [ 9600/20000]  lr: 5.5961e-03  eta: 0:18:30  time: 0.1101  data_time: 0.0035  memory: 1827  loss: 0.1138  decode.loss_ce: 0.0572  decode.acc_seg: 85.3789  aux_0.loss_ce: 0.0233  aux_0.acc_seg: 84.6567  aux_1.loss_ce: 0.0333  aux_1.acc_seg: 67.8323
2023/02/13 22:10:29 - mmengine - INFO - Iter(train) [ 9800/20000]  lr: 5.5009e-03  eta: 0:18:08  time: 0.1067  data_time: 0.0033  memory: 1827  loss: 0.1004  decode.loss_ce: 0.0473  decode.acc_seg: 79.5337  aux_0.loss_ce: 0.0203  aux_0.acc_seg: 79.4777  aux_1.loss_ce: 0.0328  aux_1.acc_seg: 64.1783
2023/02/13 22:10:50 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:10:50 - mmengine - INFO - Iter(train) [10000/20000]  lr: 5.4055e-03  eta: 0:17:47  time: 0.1115  data_time: 0.0031  memory: 1827  loss: 0.1186  decode.loss_ce: 0.0575  decode.acc_seg: 69.3764  aux_0.loss_ce: 0.0241  aux_0.acc_seg: 66.0057  aux_1.loss_ce: 0.0370  aux_1.acc_seg: 55.4903
2023/02/13 22:10:50 - mmengine - INFO - Saving checkpoint at 10000 iterations
2023/02/13 22:10:53 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:15  time: 0.0106  data_time: 0.0006  memory: 96  
2023/02/13 22:10:55 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0114  data_time: 0.0007  memory: 76  
2023/02/13 22:10:58 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:09  time: 0.0110  data_time: 0.0009  memory: 110  
2023/02/13 22:11:00 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0119  data_time: 0.0005  memory: 81  
2023/02/13 22:11:02 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0106  data_time: 0.0007  memory: 77  
2023/02/13 22:11:04 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:02  time: 0.0107  data_time: 0.0005  memory: 88  
2023/02/13 22:11:07 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0117  data_time: 0.0008  memory: 83  
2023/02/13 22:11:07 - mmengine - INFO - per class results:
2023/02/13 22:11:07 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 84.85 | 96.19 |
|  aeroplane  |  40.7 | 65.95 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.37 |  0.37 |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 47.16 |  54.7 |
|     car     | 57.82 | 67.33 |
|     cat     | 29.82 | 85.42 |
|    chair    |  0.0  |  0.0  |
|     cow     | 22.48 | 32.84 |
| diningtable |  1.84 |  1.89 |
|     dog     |  2.88 |  3.41 |
|    horse    | 14.31 | 18.69 |
|  motorbike  | 37.37 | 64.75 |
|    person   | 57.03 | 73.15 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 21.06 | 31.16 |
|     sofa    |  0.34 |  0.34 |
|    train    | 17.79 | 18.47 |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023/02/13 22:11:07 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 80.8000  mIoU: 20.7500  mAcc: 29.2700
2023/02/13 22:11:29 - mmengine - INFO - Iter(train) [10200/20000]  lr: 5.3099e-03  eta: 0:17:26  time: 0.1057  data_time: 0.0034  memory: 1827  loss: 0.1084  decode.loss_ce: 0.0520  decode.acc_seg: 74.1267  aux_0.loss_ce: 0.0221  aux_0.acc_seg: 72.7951  aux_1.loss_ce: 0.0343  aux_1.acc_seg: 66.4070
2023/02/13 22:11:50 - mmengine - INFO - Iter(train) [10400/20000]  lr: 5.2141e-03  eta: 0:17:04  time: 0.1082  data_time: 0.0033  memory: 1827  loss: 0.1080  decode.loss_ce: 0.0534  decode.acc_seg: 86.5773  aux_0.loss_ce: 0.0222  aux_0.acc_seg: 86.0198  aux_1.loss_ce: 0.0325  aux_1.acc_seg: 80.6049
2023/02/13 22:12:11 - mmengine - INFO - Iter(train) [10600/20000]  lr: 5.1181e-03  eta: 0:16:43  time: 0.1085  data_time: 0.0034  memory: 1827  loss: 0.1332  decode.loss_ce: 0.0657  decode.acc_seg: 79.8758  aux_0.loss_ce: 0.0281  aux_0.acc_seg: 85.3095  aux_1.loss_ce: 0.0395  aux_1.acc_seg: 64.2681
2023/02/13 22:12:33 - mmengine - INFO - Iter(train) [10800/20000]  lr: 5.0219e-03  eta: 0:16:22  time: 0.1063  data_time: 0.0034  memory: 1827  loss: 0.1113  decode.loss_ce: 0.0548  decode.acc_seg: 84.1249  aux_0.loss_ce: 0.0222  aux_0.acc_seg: 84.7721  aux_1.loss_ce: 0.0343  aux_1.acc_seg: 70.1488
2023/02/13 22:12:54 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:12:54 - mmengine - INFO - Iter(train) [11000/20000]  lr: 4.9255e-03  eta: 0:16:00  time: 0.1081  data_time: 0.0033  memory: 1827  loss: 0.0960  decode.loss_ce: 0.0462  decode.acc_seg: 69.6864  aux_0.loss_ce: 0.0192  aux_0.acc_seg: 69.0501  aux_1.loss_ce: 0.0305  aux_1.acc_seg: 67.9175
2023/02/13 22:13:16 - mmengine - INFO - Iter(train) [11200/20000]  lr: 4.8289e-03  eta: 0:15:39  time: 0.1062  data_time: 0.0033  memory: 1827  loss: 0.1219  decode.loss_ce: 0.0600  decode.acc_seg: 80.2583  aux_0.loss_ce: 0.0246  aux_0.acc_seg: 86.2219  aux_1.loss_ce: 0.0373  aux_1.acc_seg: 80.5376
2023/02/13 22:13:37 - mmengine - INFO - Iter(train) [11400/20000]  lr: 4.7321e-03  eta: 0:15:18  time: 0.1062  data_time: 0.0034  memory: 1827  loss: 0.1152  decode.loss_ce: 0.0552  decode.acc_seg: 65.3125  aux_0.loss_ce: 0.0231  aux_0.acc_seg: 66.0359  aux_1.loss_ce: 0.0369  aux_1.acc_seg: 62.5365
2023/02/13 22:13:58 - mmengine - INFO - Iter(train) [11600/20000]  lr: 4.6350e-03  eta: 0:14:56  time: 0.1044  data_time: 0.0036  memory: 1827  loss: 0.1146  decode.loss_ce: 0.0573  decode.acc_seg: 71.1011  aux_0.loss_ce: 0.0242  aux_0.acc_seg: 68.3078  aux_1.loss_ce: 0.0331  aux_1.acc_seg: 61.3417
2023/02/13 22:14:20 - mmengine - INFO - Iter(train) [11800/20000]  lr: 4.5377e-03  eta: 0:14:35  time: 0.1056  data_time: 0.0032  memory: 1827  loss: 0.1074  decode.loss_ce: 0.0516  decode.acc_seg: 70.0714  aux_0.loss_ce: 0.0211  aux_0.acc_seg: 72.8072  aux_1.loss_ce: 0.0347  aux_1.acc_seg: 70.6858
2023/02/13 22:14:41 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:14:41 - mmengine - INFO - Iter(train) [12000/20000]  lr: 4.4402e-03  eta: 0:14:14  time: 0.1065  data_time: 0.0034  memory: 1827  loss: 0.1277  decode.loss_ce: 0.0633  decode.acc_seg: 71.7097  aux_0.loss_ce: 0.0249  aux_0.acc_seg: 68.5917  aux_1.loss_ce: 0.0395  aux_1.acc_seg: 50.0243
2023/02/13 22:14:41 - mmengine - INFO - Saving checkpoint at 12000 iterations
2023/02/13 22:14:44 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:13  time: 0.0118  data_time: 0.0006  memory: 96  
2023/02/13 22:14:46 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:11  time: 0.0105  data_time: 0.0006  memory: 76  
2023/02/13 22:14:48 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:09  time: 0.0108  data_time: 0.0008  memory: 110  
2023/02/13 22:14:51 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0107  data_time: 0.0007  memory: 81  
2023/02/13 22:14:53 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:04  time: 0.0110  data_time: 0.0007  memory: 77  
2023/02/13 22:14:55 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:02  time: 0.0125  data_time: 0.0007  memory: 88  
2023/02/13 22:14:58 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0123  data_time: 0.0005  memory: 83  
2023/02/13 22:14:59 - mmengine - INFO - per class results:
2023/02/13 22:14:59 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 84.74 | 93.49 |
|  aeroplane  | 36.61 | 70.79 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.48 |  0.49 |
|     boat    |  0.05 |  0.05 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 54.46 | 73.38 |
|     car     | 39.68 |  81.3 |
|     cat     | 27.32 | 89.76 |
|    chair    |  0.0  |  0.0  |
|     cow     | 10.91 | 12.43 |
| diningtable |  6.15 |  7.64 |
|     dog     |  3.24 |  3.72 |
|    horse    | 12.25 | 15.95 |
|  motorbike  |  27.0 | 79.51 |
|    person   | 53.24 | 60.93 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 16.14 | 22.43 |
|     sofa    |  2.79 |  2.83 |
|    train    | 43.99 | 57.27 |
|  tvmonitor  |  7.78 |  8.07 |
+-------------+-------+-------+
2023/02/13 22:14:59 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 79.4500  mIoU: 20.3300  mAcc: 32.3800
2023/02/13 22:15:20 - mmengine - INFO - Iter(train) [12200/20000]  lr: 4.3424e-03  eta: 0:13:53  time: 0.1060  data_time: 0.0034  memory: 1827  loss: 0.1114  decode.loss_ce: 0.0521  decode.acc_seg: 84.7062  aux_0.loss_ce: 0.0218  aux_0.acc_seg: 84.4913  aux_1.loss_ce: 0.0375  aux_1.acc_seg: 60.9598
2023/02/13 22:15:42 - mmengine - INFO - Iter(train) [12400/20000]  lr: 4.2444e-03  eta: 0:13:31  time: 0.1081  data_time: 0.0035  memory: 1827  loss: 0.1047  decode.loss_ce: 0.0497  decode.acc_seg: 74.6935  aux_0.loss_ce: 0.0216  aux_0.acc_seg: 75.6870  aux_1.loss_ce: 0.0335  aux_1.acc_seg: 67.5513
2023/02/13 22:16:03 - mmengine - INFO - Iter(train) [12600/20000]  lr: 4.1461e-03  eta: 0:13:10  time: 0.1047  data_time: 0.0032  memory: 1827  loss: 0.0815  decode.loss_ce: 0.0371  decode.acc_seg: 96.7058  aux_0.loss_ce: 0.0163  aux_0.acc_seg: 94.9069  aux_1.loss_ce: 0.0282  aux_1.acc_seg: 87.3410
2023/02/13 22:16:25 - mmengine - INFO - Iter(train) [12800/20000]  lr: 4.0475e-03  eta: 0:12:49  time: 0.1090  data_time: 0.0034  memory: 1827  loss: 0.1180  decode.loss_ce: 0.0571  decode.acc_seg: 60.4948  aux_0.loss_ce: 0.0239  aux_0.acc_seg: 55.9277  aux_1.loss_ce: 0.0370  aux_1.acc_seg: 54.7268
2023/02/13 22:16:46 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:16:46 - mmengine - INFO - Iter(train) [13000/20000]  lr: 3.9487e-03  eta: 0:12:27  time: 0.1053  data_time: 0.0036  memory: 1827  loss: 0.1211  decode.loss_ce: 0.0579  decode.acc_seg: 77.8377  aux_0.loss_ce: 0.0250  aux_0.acc_seg: 77.4037  aux_1.loss_ce: 0.0382  aux_1.acc_seg: 68.4828
2023/02/13 22:17:07 - mmengine - INFO - Iter(train) [13200/20000]  lr: 3.8496e-03  eta: 0:12:06  time: 0.1075  data_time: 0.0034  memory: 1827  loss: 0.0987  decode.loss_ce: 0.0470  decode.acc_seg: 88.7178  aux_0.loss_ce: 0.0196  aux_0.acc_seg: 84.3650  aux_1.loss_ce: 0.0322  aux_1.acc_seg: 67.0350
2023/02/13 22:17:29 - mmengine - INFO - Iter(train) [13400/20000]  lr: 3.7502e-03  eta: 0:11:45  time: 0.1071  data_time: 0.0033  memory: 1827  loss: 0.1042  decode.loss_ce: 0.0503  decode.acc_seg: 58.0576  aux_0.loss_ce: 0.0211  aux_0.acc_seg: 56.9543  aux_1.loss_ce: 0.0328  aux_1.acc_seg: 50.2366
2023/02/13 22:17:50 - mmengine - INFO - Iter(train) [13600/20000]  lr: 3.6505e-03  eta: 0:11:23  time: 0.1058  data_time: 0.0037  memory: 1827  loss: 0.0927  decode.loss_ce: 0.0421  decode.acc_seg: 84.6144  aux_0.loss_ce: 0.0186  aux_0.acc_seg: 92.3864  aux_1.loss_ce: 0.0320  aux_1.acc_seg: 76.5535
2023/02/13 22:18:11 - mmengine - INFO - Iter(train) [13800/20000]  lr: 3.5505e-03  eta: 0:11:02  time: 0.1051  data_time: 0.0037  memory: 1827  loss: 0.1098  decode.loss_ce: 0.0535  decode.acc_seg: 92.4947  aux_0.loss_ce: 0.0223  aux_0.acc_seg: 89.8937  aux_1.loss_ce: 0.0340  aux_1.acc_seg: 76.6347
2023/02/13 22:18:33 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:18:33 - mmengine - INFO - Iter(train) [14000/20000]  lr: 3.4501e-03  eta: 0:10:40  time: 0.1057  data_time: 0.0032  memory: 1827  loss: 0.1126  decode.loss_ce: 0.0567  decode.acc_seg: 85.3773  aux_0.loss_ce: 0.0234  aux_0.acc_seg: 85.0262  aux_1.loss_ce: 0.0326  aux_1.acc_seg: 95.5635
2023/02/13 22:18:33 - mmengine - INFO - Saving checkpoint at 14000 iterations
2023/02/13 22:18:36 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:14  time: 0.0106  data_time: 0.0006  memory: 96  
2023/02/13 22:18:38 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0139  data_time: 0.0004  memory: 76  
2023/02/13 22:18:40 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:09  time: 0.0109  data_time: 0.0007  memory: 110  
2023/02/13 22:18:42 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0108  data_time: 0.0007  memory: 81  
2023/02/13 22:18:45 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0152  data_time: 0.0009  memory: 77  
2023/02/13 22:18:47 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:02  time: 0.0108  data_time: 0.0007  memory: 88  
2023/02/13 22:18:50 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0107  data_time: 0.0006  memory: 83  
2023/02/13 22:18:50 - mmengine - INFO - per class results:
2023/02/13 22:18:50 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 85.53 | 95.95 |
|  aeroplane  | 45.04 | 66.61 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.27 |  0.28 |
|     boat    |  0.05 |  0.05 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 68.37 | 84.37 |
|     car     | 56.23 | 78.96 |
|     cat     | 31.77 | 89.51 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.97 |  0.98 |
| diningtable |  5.52 |  7.06 |
|     dog     |  2.61 |  2.85 |
|    horse    |  9.69 | 11.55 |
|  motorbike  | 44.22 | 61.68 |
|    person   | 55.69 | 63.67 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 13.89 | 28.63 |
|     sofa    |  2.17 |  2.22 |
|    train    | 48.77 | 70.85 |
|  tvmonitor  | 29.66 | 42.04 |
+-------------+-------+-------+
2023/02/13 22:18:50 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 81.6200  mIoU: 23.8300  mAcc: 33.6800
2023/02/13 22:19:12 - mmengine - INFO - Iter(train) [14200/20000]  lr: 3.3495e-03  eta: 0:10:19  time: 0.1090  data_time: 0.0033  memory: 1827  loss: 0.1036  decode.loss_ce: 0.0493  decode.acc_seg: 88.3382  aux_0.loss_ce: 0.0213  aux_0.acc_seg: 89.6303  aux_1.loss_ce: 0.0329  aux_1.acc_seg: 80.3210
2023/02/13 22:19:34 - mmengine - INFO - Iter(train) [14400/20000]  lr: 3.2485e-03  eta: 0:09:58  time: 0.1071  data_time: 0.0035  memory: 1827  loss: 0.1115  decode.loss_ce: 0.0525  decode.acc_seg: 84.4015  aux_0.loss_ce: 0.0226  aux_0.acc_seg: 84.4820  aux_1.loss_ce: 0.0363  aux_1.acc_seg: 64.9663
2023/02/13 22:19:55 - mmengine - INFO - Iter(train) [14600/20000]  lr: 3.1471e-03  eta: 0:09:36  time: 0.1061  data_time: 0.0037  memory: 1827  loss: 0.0866  decode.loss_ce: 0.0400  decode.acc_seg: 84.1446  aux_0.loss_ce: 0.0173  aux_0.acc_seg: 79.5375  aux_1.loss_ce: 0.0292  aux_1.acc_seg: 69.3454
2023/02/13 22:20:16 - mmengine - INFO - Iter(train) [14800/20000]  lr: 3.0453e-03  eta: 0:09:15  time: 0.1074  data_time: 0.0032  memory: 1827  loss: 0.1168  decode.loss_ce: 0.0564  decode.acc_seg: 62.6625  aux_0.loss_ce: 0.0236  aux_0.acc_seg: 62.3236  aux_1.loss_ce: 0.0368  aux_1.acc_seg: 51.1911
2023/02/13 22:20:37 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:20:37 - mmengine - INFO - Iter(train) [15000/20000]  lr: 2.9432e-03  eta: 0:08:54  time: 0.1051  data_time: 0.0035  memory: 1827  loss: 0.0977  decode.loss_ce: 0.0443  decode.acc_seg: 82.2628  aux_0.loss_ce: 0.0194  aux_0.acc_seg: 81.3725  aux_1.loss_ce: 0.0340  aux_1.acc_seg: 66.6841
2023/02/13 22:20:59 - mmengine - INFO - Iter(train) [15200/20000]  lr: 2.8406e-03  eta: 0:08:32  time: 0.1092  data_time: 0.0036  memory: 1827  loss: 0.1028  decode.loss_ce: 0.0492  decode.acc_seg: 62.8725  aux_0.loss_ce: 0.0202  aux_0.acc_seg: 72.0432  aux_1.loss_ce: 0.0334  aux_1.acc_seg: 59.1139
2023/02/13 22:21:20 - mmengine - INFO - Iter(train) [15400/20000]  lr: 2.7376e-03  eta: 0:08:11  time: 0.1048  data_time: 0.0033  memory: 1827  loss: 0.0954  decode.loss_ce: 0.0445  decode.acc_seg: 73.6520  aux_0.loss_ce: 0.0188  aux_0.acc_seg: 76.3126  aux_1.loss_ce: 0.0322  aux_1.acc_seg: 65.3078
2023/02/13 22:21:41 - mmengine - INFO - Iter(train) [15600/20000]  lr: 2.6342e-03  eta: 0:07:49  time: 0.1068  data_time: 0.0035  memory: 1827  loss: 0.0951  decode.loss_ce: 0.0423  decode.acc_seg: 81.8270  aux_0.loss_ce: 0.0183  aux_0.acc_seg: 80.8939  aux_1.loss_ce: 0.0345  aux_1.acc_seg: 64.8199
2023/02/13 22:22:03 - mmengine - INFO - Iter(train) [15800/20000]  lr: 2.5303e-03  eta: 0:07:28  time: 0.1060  data_time: 0.0035  memory: 1827  loss: 0.1103  decode.loss_ce: 0.0527  decode.acc_seg: 85.3637  aux_0.loss_ce: 0.0222  aux_0.acc_seg: 82.6856  aux_1.loss_ce: 0.0354  aux_1.acc_seg: 76.6170
2023/02/13 22:22:24 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:22:24 - mmengine - INFO - Iter(train) [16000/20000]  lr: 2.4259e-03  eta: 0:07:07  time: 0.1068  data_time: 0.0033  memory: 1827  loss: 0.1153  decode.loss_ce: 0.0515  decode.acc_seg: 80.7268  aux_0.loss_ce: 0.0223  aux_0.acc_seg: 80.4103  aux_1.loss_ce: 0.0415  aux_1.acc_seg: 61.7647
2023/02/13 22:22:24 - mmengine - INFO - Saving checkpoint at 16000 iterations
2023/02/13 22:22:27 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:14  time: 0.0104  data_time: 0.0006  memory: 96  
2023/02/13 22:22:30 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0118  data_time: 0.0007  memory: 76  
2023/02/13 22:22:32 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:09  time: 0.0108  data_time: 0.0004  memory: 110  
2023/02/13 22:22:34 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0141  data_time: 0.0006  memory: 81  
2023/02/13 22:22:37 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0124  data_time: 0.0007  memory: 77  
2023/02/13 22:22:39 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0147  data_time: 0.0009  memory: 88  
2023/02/13 22:22:42 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0133  data_time: 0.0010  memory: 83  
2023/02/13 22:22:43 - mmengine - INFO - per class results:
2023/02/13 22:22:43 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 86.45 | 97.36 |
|  aeroplane  | 48.17 | 63.71 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.91 |  0.92 |
|     boat    |  0.06 |  0.06 |
|    bottle   |  0.0  |  0.0  |
|     bus     |  68.8 |  71.3 |
|     car     | 60.06 | 67.16 |
|     cat     | 38.85 | 76.79 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.06 |  0.06 |
| diningtable |  9.92 | 14.74 |
|     dog     |  5.01 |  5.8  |
|    horse    | 19.84 | 36.09 |
|  motorbike  | 37.42 | 77.11 |
|    person   | 57.33 | 70.92 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  18.1 | 20.87 |
|     sofa    |  8.95 | 10.12 |
|    train    | 54.75 | 69.95 |
|  tvmonitor  | 30.79 |  37.6 |
+-------------+-------+-------+
2023/02/13 22:22:43 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 82.8900  mIoU: 25.9700  mAcc: 34.3100
2023/02/13 22:23:05 - mmengine - INFO - Iter(train) [16200/20000]  lr: 2.3209e-03  eta: 0:06:46  time: 0.1124  data_time: 0.0039  memory: 1827  loss: 0.1042  decode.loss_ce: 0.0472  decode.acc_seg: 88.6494  aux_0.loss_ce: 0.0205  aux_0.acc_seg: 80.5049  aux_1.loss_ce: 0.0365  aux_1.acc_seg: 57.6930
2023/02/13 22:23:26 - mmengine - INFO - Iter(train) [16400/20000]  lr: 2.2154e-03  eta: 0:06:24  time: 0.1058  data_time: 0.0037  memory: 1827  loss: 0.1007  decode.loss_ce: 0.0464  decode.acc_seg: 68.3247  aux_0.loss_ce: 0.0198  aux_0.acc_seg: 69.1642  aux_1.loss_ce: 0.0345  aux_1.acc_seg: 58.0867
2023/02/13 22:23:47 - mmengine - INFO - Iter(train) [16600/20000]  lr: 2.1094e-03  eta: 0:06:03  time: 0.1047  data_time: 0.0035  memory: 1827  loss: 0.1055  decode.loss_ce: 0.0497  decode.acc_seg: 44.3421  aux_0.loss_ce: 0.0209  aux_0.acc_seg: 46.2030  aux_1.loss_ce: 0.0350  aux_1.acc_seg: 46.1310
2023/02/13 22:24:09 - mmengine - INFO - Iter(train) [16800/20000]  lr: 2.0027e-03  eta: 0:05:41  time: 0.1056  data_time: 0.0032  memory: 1827  loss: 0.1144  decode.loss_ce: 0.0524  decode.acc_seg: 87.6988  aux_0.loss_ce: 0.0221  aux_0.acc_seg: 86.5762  aux_1.loss_ce: 0.0399  aux_1.acc_seg: 46.1001
2023/02/13 22:24:30 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:24:30 - mmengine - INFO - Iter(train) [17000/20000]  lr: 1.8953e-03  eta: 0:05:20  time: 0.1088  data_time: 0.0038  memory: 1827  loss: 0.1039  decode.loss_ce: 0.0493  decode.acc_seg: 90.3980  aux_0.loss_ce: 0.0210  aux_0.acc_seg: 91.0905  aux_1.loss_ce: 0.0335  aux_1.acc_seg: 78.2140
2023/02/13 22:24:51 - mmengine - INFO - Iter(train) [17200/20000]  lr: 1.7872e-03  eta: 0:04:59  time: 0.1047  data_time: 0.0035  memory: 1827  loss: 0.0979  decode.loss_ce: 0.0450  decode.acc_seg: 92.3962  aux_0.loss_ce: 0.0195  aux_0.acc_seg: 91.3595  aux_1.loss_ce: 0.0334  aux_1.acc_seg: 73.8271
2023/02/13 22:25:13 - mmengine - INFO - Iter(train) [17400/20000]  lr: 1.6784e-03  eta: 0:04:37  time: 0.1084  data_time: 0.0035  memory: 1827  loss: 0.1006  decode.loss_ce: 0.0439  decode.acc_seg: 93.0563  aux_0.loss_ce: 0.0193  aux_0.acc_seg: 91.3853  aux_1.loss_ce: 0.0375  aux_1.acc_seg: 53.8733
2023/02/13 22:25:34 - mmengine - INFO - Iter(train) [17600/20000]  lr: 1.5686e-03  eta: 0:04:16  time: 0.1072  data_time: 0.0035  memory: 1827  loss: 0.1023  decode.loss_ce: 0.0460  decode.acc_seg: 89.7559  aux_0.loss_ce: 0.0202  aux_0.acc_seg: 88.0456  aux_1.loss_ce: 0.0361  aux_1.acc_seg: 74.5672
2023/02/13 22:25:55 - mmengine - INFO - Iter(train) [17800/20000]  lr: 1.4580e-03  eta: 0:03:55  time: 0.1053  data_time: 0.0035  memory: 1827  loss: 0.0642  decode.loss_ce: 0.0269  decode.acc_seg: 94.5423  aux_0.loss_ce: 0.0119  aux_0.acc_seg: 93.8457  aux_1.loss_ce: 0.0254  aux_1.acc_seg: 83.2519
2023/02/13 22:26:17 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:26:17 - mmengine - INFO - Iter(train) [18000/20000]  lr: 1.3464e-03  eta: 0:03:33  time: 0.1062  data_time: 0.0033  memory: 1827  loss: 0.1073  decode.loss_ce: 0.0494  decode.acc_seg: 61.5122  aux_0.loss_ce: 0.0215  aux_0.acc_seg: 59.5554  aux_1.loss_ce: 0.0364  aux_1.acc_seg: 30.6222
2023/02/13 22:26:17 - mmengine - INFO - Saving checkpoint at 18000 iterations
2023/02/13 22:26:20 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:14  time: 0.0108  data_time: 0.0009  memory: 96  
2023/02/13 22:26:22 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0108  data_time: 0.0008  memory: 76  
2023/02/13 22:26:25 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:10  time: 0.0156  data_time: 0.0008  memory: 110  
2023/02/13 22:26:27 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:08  time: 0.0150  data_time: 0.0008  memory: 81  
2023/02/13 22:26:30 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0114  data_time: 0.0007  memory: 77  
2023/02/13 22:26:32 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0123  data_time: 0.0005  memory: 88  
2023/02/13 22:26:35 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0156  data_time: 0.0010  memory: 83  
2023/02/13 22:26:36 - mmengine - INFO - per class results:
2023/02/13 22:26:36 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 86.73 | 95.46 |
|  aeroplane  | 48.48 | 62.63 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  1.92 |  1.94 |
|     boat    |  0.18 |  0.18 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 75.08 | 82.78 |
|     car     | 61.37 | 71.76 |
|     cat     | 41.74 | 83.56 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.28 |  0.28 |
| diningtable |  19.0 | 43.05 |
|     dog     |  8.17 |  9.44 |
|    horse    | 21.02 | 31.95 |
|  motorbike  | 42.99 | 60.74 |
|    person   | 60.88 | 78.79 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 29.22 | 52.23 |
|     sofa    | 14.09 | 22.52 |
|    train    | 60.65 | 71.45 |
|  tvmonitor  | 36.09 | 54.75 |
+-------------+-------+-------+
2023/02/13 22:26:36 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 83.1100  mIoU: 28.9500  mAcc: 39.2200
2023/02/13 22:26:57 - mmengine - INFO - Iter(train) [18200/20000]  lr: 1.2336e-03  eta: 0:03:12  time: 0.1051  data_time: 0.0035  memory: 1827  loss: 0.0928  decode.loss_ce: 0.0421  decode.acc_seg: 80.3914  aux_0.loss_ce: 0.0182  aux_0.acc_seg: 78.8431  aux_1.loss_ce: 0.0324  aux_1.acc_seg: 81.4896
2023/02/13 22:27:18 - mmengine - INFO - Iter(train) [18400/20000]  lr: 1.1196e-03  eta: 0:02:50  time: 0.1078  data_time: 0.0031  memory: 1827  loss: 0.0996  decode.loss_ce: 0.0454  decode.acc_seg: 97.2174  aux_0.loss_ce: 0.0196  aux_0.acc_seg: 96.4585  aux_1.loss_ce: 0.0346  aux_1.acc_seg: 91.9852
2023/02/13 22:27:40 - mmengine - INFO - Iter(train) [18600/20000]  lr: 1.0042e-03  eta: 0:02:29  time: 0.1063  data_time: 0.0036  memory: 1827  loss: 0.0883  decode.loss_ce: 0.0392  decode.acc_seg: 82.6087  aux_0.loss_ce: 0.0173  aux_0.acc_seg: 82.3119  aux_1.loss_ce: 0.0318  aux_1.acc_seg: 77.4474
2023/02/13 22:28:01 - mmengine - INFO - Iter(train) [18800/20000]  lr: 8.8703e-04  eta: 0:02:08  time: 0.1075  data_time: 0.0034  memory: 1827  loss: 0.0939  decode.loss_ce: 0.0416  decode.acc_seg: 86.6829  aux_0.loss_ce: 0.0182  aux_0.acc_seg: 89.6029  aux_1.loss_ce: 0.0341  aux_1.acc_seg: 69.7196
2023/02/13 22:28:22 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:28:22 - mmengine - INFO - Iter(train) [19000/20000]  lr: 7.6793e-04  eta: 0:01:46  time: 0.1067  data_time: 0.0033  memory: 1827  loss: 0.1023  decode.loss_ce: 0.0447  decode.acc_seg: 81.4351  aux_0.loss_ce: 0.0199  aux_0.acc_seg: 79.8476  aux_1.loss_ce: 0.0377  aux_1.acc_seg: 62.1663
2023/02/13 22:28:44 - mmengine - INFO - Iter(train) [19200/20000]  lr: 6.4640e-04  eta: 0:01:25  time: 0.1064  data_time: 0.0035  memory: 1827  loss: 0.0994  decode.loss_ce: 0.0445  decode.acc_seg: 75.9741  aux_0.loss_ce: 0.0197  aux_0.acc_seg: 79.1632  aux_1.loss_ce: 0.0352  aux_1.acc_seg: 68.3693
2023/02/13 22:29:05 - mmengine - INFO - Iter(train) [19400/20000]  lr: 5.2176e-04  eta: 0:01:04  time: 0.1065  data_time: 0.0037  memory: 1827  loss: 0.0860  decode.loss_ce: 0.0386  decode.acc_seg: 85.4098  aux_0.loss_ce: 0.0164  aux_0.acc_seg: 82.4879  aux_1.loss_ce: 0.0310  aux_1.acc_seg: 46.7606
2023/02/13 22:29:26 - mmengine - INFO - Iter(train) [19600/20000]  lr: 3.9281e-04  eta: 0:00:42  time: 0.1052  data_time: 0.0036  memory: 1827  loss: 0.0932  decode.loss_ce: 0.0407  decode.acc_seg: 91.7245  aux_0.loss_ce: 0.0181  aux_0.acc_seg: 90.2665  aux_1.loss_ce: 0.0344  aux_1.acc_seg: 55.7649
2023/02/13 22:29:48 - mmengine - INFO - Iter(train) [19800/20000]  lr: 2.5691e-04  eta: 0:00:21  time: 0.1092  data_time: 0.0032  memory: 1827  loss: 0.0938  decode.loss_ce: 0.0406  decode.acc_seg: 86.5312  aux_0.loss_ce: 0.0186  aux_0.acc_seg: 85.1370  aux_1.loss_ce: 0.0346  aux_1.acc_seg: 76.0017
2023/02/13 22:30:09 - mmengine - INFO - Exp name: fast_scnn_voc12_20230213_215056
2023/02/13 22:30:09 - mmengine - INFO - Iter(train) [20000/20000]  lr: 1.0000e-04  eta: 0:00:00  time: 0.1062  data_time: 0.0033  memory: 1827  loss: 0.1052  decode.loss_ce: 0.0457  decode.acc_seg: 80.7920  aux_0.loss_ce: 0.0202  aux_0.acc_seg: 77.4330  aux_1.loss_ce: 0.0393  aux_1.acc_seg: 50.9554
2023/02/13 22:30:09 - mmengine - INFO - Saving checkpoint at 20000 iterations
2023/02/13 22:30:12 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:13  time: 0.0106  data_time: 0.0005  memory: 96  
2023/02/13 22:30:14 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0156  data_time: 0.0007  memory: 76  
2023/02/13 22:30:17 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:10  time: 0.0127  data_time: 0.0006  memory: 110  
2023/02/13 22:30:20 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:08  time: 0.0123  data_time: 0.0007  memory: 81  
2023/02/13 22:30:22 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0125  data_time: 0.0006  memory: 77  
2023/02/13 22:30:24 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0150  data_time: 0.0005  memory: 88  
2023/02/13 22:30:27 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0111  data_time: 0.0007  memory: 83  
2023/02/13 22:30:27 - mmengine - INFO - per class results:
2023/02/13 22:30:27 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 87.36 |  96.9 |
|  aeroplane  | 47.81 | 71.36 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  3.97 |  4.07 |
|     boat    |  0.14 |  0.14 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 76.63 | 81.05 |
|     car     | 63.56 | 72.53 |
|     cat     |  44.5 | 79.54 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.32 |  0.33 |
| diningtable | 16.87 | 23.72 |
|     dog     | 15.36 | 18.65 |
|    horse    | 23.32 |  40.5 |
|  motorbike  |  42.7 | 73.84 |
|    person   | 62.12 | 76.95 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 31.95 | 55.57 |
|     sofa    | 15.77 |  20.3 |
|    train    |  61.7 | 72.11 |
|  tvmonitor  | 36.64 | 47.79 |
+-------------+-------+-------+
2023/02/13 22:30:27 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 84.1900  mIoU: 30.0300  mAcc: 39.7800
