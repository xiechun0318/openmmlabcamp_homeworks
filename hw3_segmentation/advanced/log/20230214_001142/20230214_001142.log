2023/02/14 00:11:53 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 1999527091
    GPU 0: NVIDIA GeForce RTX 3080
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.99
    MSVC: Microsoft(R) C/C++ Optimizing Compiler Version 19.29.30038.1 for x64
    GCC: n/a
    PyTorch: 1.13.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/14 00:11:53 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True, momentum=0.01)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 512))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(512, 512)),
    backbone=dict(
        type='FastSCNN',
        downsample_dw_channels=(32, 48),
        global_in_channels=64,
        global_block_channels=(64, 96, 128),
        global_block_strides=(2, 2, 1),
        global_out_channels=128,
        higher_in_channels=64,
        lower_in_channels=128,
        fusion_out_channels=128,
        out_indices=(0, 1, 2),
        norm_cfg=dict(type='SyncBN', requires_grad=True, momentum=0.01),
        align_corners=False),
    decode_head=dict(
        type='DepthwiseSeparableFCNHead',
        in_channels=128,
        channels=128,
        concat_input=False,
        num_classes=21,
        in_index=-1,
        norm_cfg=dict(type='SyncBN', requires_grad=True, momentum=0.01),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1)),
    auxiliary_head=[
        dict(
            type='FCNHead',
            in_channels=128,
            channels=32,
            num_convs=1,
            num_classes=21,
            in_index=-2,
            norm_cfg=dict(type='BN', requires_grad=True, momentum=0.01),
            concat_input=False,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.4)),
        dict(
            type='FCNHead',
            in_channels=64,
            channels=32,
            num_convs=1,
            num_classes=21,
            in_index=-3,
            norm_cfg=dict(type='BN', requires_grad=True, momentum=0.01),
            concat_input=False,
            align_corners=False,
            loss_decode=dict(
                type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.4))
    ],
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = 'data/VOCdevkit/VOC2012'
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 512),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 512), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=4,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 512),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='PascalVOCDataset',
        data_root='data/VOCdevkit/VOC2012',
        data_prefix=dict(
            img_path='JPEGImages', seg_map_path='SegmentationClass'),
        ann_file='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 512), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = True
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=4e-05)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=4e-05),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=20000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=40000, val_interval=2000)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=200, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', by_epoch=False, interval=2000,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
launcher = 'none'
work_dir = './work_dirs/advanced'

2023/02/14 00:11:53 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:53 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:54 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:54 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/14 00:11:54 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:54 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/14 00:11:55 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:55 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:55 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:11:55 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:03 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:03 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:03 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:03 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:03 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/14 00:12:05 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
Name of parameter - Initialization information

backbone.learning_to_downsample.conv.conv.weight - torch.Size([32, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.depthwise_conv.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv1.depthwise_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.depthwise_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.pointwise_conv.conv.weight - torch.Size([48, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv1.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv1.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.depthwise_conv.conv.weight - torch.Size([48, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.pointwise_conv.conv.weight - torch.Size([64, 48, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.learning_to_downsample.dsconv2.pointwise_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.learning_to_downsample.dsconv2.pointwise_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck1.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck1.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck2.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck2.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.2.conv.weight - torch.Size([128, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.0.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.0.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.0.conv.weight - torch.Size([768, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.1.conv.weight - torch.Size([768, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.2.conv.weight - torch.Size([128, 768, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.1.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.1.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.0.conv.weight - torch.Size([768, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.0.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.0.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.1.conv.weight - torch.Size([768, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.1.bn.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.1.bn.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.2.conv.weight - torch.Size([128, 768, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.bottleneck3.2.conv.2.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.bottleneck3.2.conv.2.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.0.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.0.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.0.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.1.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.1.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.1.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.2.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.2.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.2.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.3.1.conv.weight - torch.Size([32, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.ppm.3.1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.ppm.3.1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.out.conv.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.global_feature_extractor.out.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.global_feature_extractor.out.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.dwconv.conv.weight - torch.Size([128, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.dwconv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.dwconv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_lower_res.conv.weight - torch.Size([128, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.conv_lower_res.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_lower_res.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_higher_res.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.feature_fusion.conv_higher_res.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.feature_fusion.conv_higher_res.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.conv_seg.weight - torch.Size([21, 128, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([21]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.convs.0.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.0.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.conv.weight - torch.Size([128, 1, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.depthwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.conv.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.convs.1.pointwise_conv.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.weight - torch.Size([21, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.conv_seg.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.conv.weight - torch.Size([32, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.0.convs.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.weight - torch.Size([21, 32, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.conv_seg.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.conv.weight - torch.Size([32, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.1.convs.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/14 00:12:05 - mmengine - INFO - Auto resumed from the latest checkpoint D:\workspace\openmmlab_tutorial\mmsegmentation\work_dirs\advanced\iter_34000.pth.
2023/02/14 00:12:05 - mmengine - INFO - Load checkpoint from D:\workspace\openmmlab_tutorial\mmsegmentation\work_dirs\advanced\iter_34000.pth
2023/02/14 00:12:05 - mmengine - INFO - resumed epoch: 0, iter: 34000
2023/02/14 00:12:05 - mmengine - INFO - Checkpoints will be saved to D:\workspace\openmmlab_tutorial\mmsegmentation\work_dirs\advanced.
2023/02/14 00:12:29 - mmengine - INFO - Iter(train) [34200/40000]  lr: 1.0000e-04  eta: 0:11:28  time: 0.1053  data_time: 0.0035  memory: 1827  loss: 0.0807  decode.loss_ce: 0.0342  decode.acc_seg: 86.2922  aux_0.loss_ce: 0.0148  aux_0.acc_seg: 83.2838  aux_1.loss_ce: 0.0317  aux_1.acc_seg: 49.0461
2023/02/14 00:12:50 - mmengine - INFO - Iter(train) [34400/40000]  lr: 1.0000e-04  eta: 0:10:31  time: 0.1062  data_time: 0.0036  memory: 1828  loss: 0.0969  decode.loss_ce: 0.0418  decode.acc_seg: 85.5068  aux_0.loss_ce: 0.0181  aux_0.acc_seg: 85.4195  aux_1.loss_ce: 0.0370  aux_1.acc_seg: 83.0617
2023/02/14 00:13:12 - mmengine - INFO - Iter(train) [34600/40000]  lr: 1.0000e-04  eta: 0:09:59  time: 0.1070  data_time: 0.0038  memory: 1827  loss: 0.0933  decode.loss_ce: 0.0398  decode.acc_seg: 97.1491  aux_0.loss_ce: 0.0175  aux_0.acc_seg: 97.2331  aux_1.loss_ce: 0.0360  aux_1.acc_seg: 68.0267
2023/02/14 00:13:33 - mmengine - INFO - Iter(train) [34800/40000]  lr: 1.0000e-04  eta: 0:09:31  time: 0.1094  data_time: 0.0035  memory: 1827  loss: 0.0856  decode.loss_ce: 0.0362  decode.acc_seg: 82.8299  aux_0.loss_ce: 0.0165  aux_0.acc_seg: 82.2872  aux_1.loss_ce: 0.0330  aux_1.acc_seg: 67.7743
2023/02/14 00:13:55 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:13:55 - mmengine - INFO - Iter(train) [35000/40000]  lr: 1.0000e-04  eta: 0:09:06  time: 0.1065  data_time: 0.0035  memory: 1828  loss: 0.0837  decode.loss_ce: 0.0366  decode.acc_seg: 87.0335  aux_0.loss_ce: 0.0162  aux_0.acc_seg: 86.8748  aux_1.loss_ce: 0.0309  aux_1.acc_seg: 77.6386
2023/02/14 00:14:17 - mmengine - INFO - Iter(train) [35200/40000]  lr: 1.0000e-04  eta: 0:08:45  time: 0.1130  data_time: 0.0036  memory: 1828  loss: 0.0838  decode.loss_ce: 0.0338  decode.acc_seg: 78.5209  aux_0.loss_ce: 0.0154  aux_0.acc_seg: 77.3143  aux_1.loss_ce: 0.0346  aux_1.acc_seg: 63.7967
2023/02/14 00:14:39 - mmengine - INFO - Iter(train) [35400/40000]  lr: 1.0000e-04  eta: 0:08:24  time: 0.1073  data_time: 0.0036  memory: 1827  loss: 0.0793  decode.loss_ce: 0.0332  decode.acc_seg: 91.3647  aux_0.loss_ce: 0.0151  aux_0.acc_seg: 89.4231  aux_1.loss_ce: 0.0310  aux_1.acc_seg: 83.5390
2023/02/14 00:15:00 - mmengine - INFO - Iter(train) [35600/40000]  lr: 1.0000e-04  eta: 0:08:01  time: 0.1132  data_time: 0.0036  memory: 1828  loss: 0.0963  decode.loss_ce: 0.0447  decode.acc_seg: 63.6201  aux_0.loss_ce: 0.0189  aux_0.acc_seg: 64.8950  aux_1.loss_ce: 0.0327  aux_1.acc_seg: 53.2538
2023/02/14 00:15:22 - mmengine - INFO - Iter(train) [35800/40000]  lr: 1.0000e-04  eta: 0:07:38  time: 0.1050  data_time: 0.0033  memory: 1827  loss: 0.0967  decode.loss_ce: 0.0421  decode.acc_seg: 78.0459  aux_0.loss_ce: 0.0189  aux_0.acc_seg: 77.4979  aux_1.loss_ce: 0.0357  aux_1.acc_seg: 41.4908
2023/02/14 00:15:43 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:15:43 - mmengine - INFO - Iter(train) [36000/40000]  lr: 1.0000e-04  eta: 0:07:15  time: 0.1067  data_time: 0.0036  memory: 1829  loss: 0.0819  decode.loss_ce: 0.0354  decode.acc_seg: 81.5045  aux_0.loss_ce: 0.0150  aux_0.acc_seg: 81.0631  aux_1.loss_ce: 0.0316  aux_1.acc_seg: 56.7967
2023/02/14 00:15:43 - mmengine - INFO - Saving checkpoint at 36000 iterations
2023/02/14 00:16:05 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:02:14  time: 0.0520  data_time: 0.0006  memory: 4201  
2023/02/14 00:16:10 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:01:09  time: 0.0456  data_time: 0.0006  memory: 3165  
2023/02/14 00:16:16 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:45  time: 0.0165  data_time: 0.0007  memory: 4205  
2023/02/14 00:16:21 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:30  time: 0.1074  data_time: 0.0009  memory: 4197  
2023/02/14 00:16:25 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:18  time: 0.0193  data_time: 0.0005  memory: 3167  
2023/02/14 00:16:29 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:09  time: 0.0277  data_time: 0.0006  memory: 4199  
2023/02/14 00:16:32 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:01  time: 0.0108  data_time: 0.0007  memory: 4197  
2023/02/14 00:16:33 - mmengine - INFO - per class results:
2023/02/14 00:16:33 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 87.66 |  96.8 |
|  aeroplane  | 49.02 | 70.65 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  4.24 |  4.34 |
|     boat    |  0.57 |  0.58 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 77.61 | 81.78 |
|     car     | 65.27 | 75.06 |
|     cat     | 43.91 |  80.5 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.08 |  0.08 |
| diningtable | 20.23 | 28.88 |
|     dog     | 15.83 | 19.03 |
|    horse    | 24.19 | 41.23 |
|  motorbike  | 43.47 | 72.28 |
|    person   | 63.44 | 78.65 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 32.91 | 55.77 |
|     sofa    |  16.9 | 22.13 |
|    train    | 64.69 | 75.75 |
|  tvmonitor  | 38.69 | 55.93 |
+-------------+-------+-------+
2023/02/14 00:16:33 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 84.4800  mIoU: 30.8900  mAcc: 40.9300
2023/02/14 00:16:33 - mmengine - INFO - The best checkpoint with 84.4800 aAcc at 36000 iter is saved to best_aAcc_iter_36000.pth.
2023/02/14 00:16:55 - mmengine - INFO - Iter(train) [36200/40000]  lr: 1.0000e-04  eta: 0:06:54  time: 0.1069  data_time: 0.0039  memory: 3165  loss: 0.0964  decode.loss_ce: 0.0420  decode.acc_seg: 89.6891  aux_0.loss_ce: 0.0188  aux_0.acc_seg: 85.9375  aux_1.loss_ce: 0.0356  aux_1.acc_seg: 68.8856
2023/02/14 00:17:16 - mmengine - INFO - Iter(train) [36400/40000]  lr: 1.0000e-04  eta: 0:06:32  time: 0.1130  data_time: 0.0038  memory: 1826  loss: 0.0924  decode.loss_ce: 0.0407  decode.acc_seg: 84.8405  aux_0.loss_ce: 0.0181  aux_0.acc_seg: 85.7742  aux_1.loss_ce: 0.0336  aux_1.acc_seg: 74.9064
2023/02/14 00:17:38 - mmengine - INFO - Iter(train) [36600/40000]  lr: 1.0000e-04  eta: 0:06:10  time: 0.1100  data_time: 0.0037  memory: 1826  loss: 0.1051  decode.loss_ce: 0.0467  decode.acc_seg: 69.9589  aux_0.loss_ce: 0.0210  aux_0.acc_seg: 69.3960  aux_1.loss_ce: 0.0374  aux_1.acc_seg: 57.9411
2023/02/14 00:18:00 - mmengine - INFO - Iter(train) [36800/40000]  lr: 1.0000e-04  eta: 0:05:49  time: 0.1111  data_time: 0.0032  memory: 1827  loss: 0.0898  decode.loss_ce: 0.0391  decode.acc_seg: 93.9065  aux_0.loss_ce: 0.0166  aux_0.acc_seg: 90.1552  aux_1.loss_ce: 0.0342  aux_1.acc_seg: 85.6816
2023/02/14 00:18:22 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:18:22 - mmengine - INFO - Iter(train) [37000/40000]  lr: 1.0000e-04  eta: 0:05:27  time: 0.1068  data_time: 0.0035  memory: 1827  loss: 0.0848  decode.loss_ce: 0.0379  decode.acc_seg: 91.5391  aux_0.loss_ce: 0.0168  aux_0.acc_seg: 93.9086  aux_1.loss_ce: 0.0301  aux_1.acc_seg: 84.9818
2023/02/14 00:18:44 - mmengine - INFO - Iter(train) [37200/40000]  lr: 1.0000e-04  eta: 0:05:05  time: 0.1121  data_time: 0.0034  memory: 1825  loss: 0.0820  decode.loss_ce: 0.0366  decode.acc_seg: 95.0489  aux_0.loss_ce: 0.0160  aux_0.acc_seg: 93.7772  aux_1.loss_ce: 0.0294  aux_1.acc_seg: 69.3690
2023/02/14 00:19:06 - mmengine - INFO - Iter(train) [37400/40000]  lr: 1.0000e-04  eta: 0:04:43  time: 0.1088  data_time: 0.0038  memory: 1826  loss: 0.0878  decode.loss_ce: 0.0370  decode.acc_seg: 88.3771  aux_0.loss_ce: 0.0168  aux_0.acc_seg: 88.6754  aux_1.loss_ce: 0.0340  aux_1.acc_seg: 85.4336
2023/02/14 00:19:27 - mmengine - INFO - Iter(train) [37600/40000]  lr: 1.0000e-04  eta: 0:04:21  time: 0.1079  data_time: 0.0035  memory: 1826  loss: 0.1073  decode.loss_ce: 0.0489  decode.acc_seg: 72.1830  aux_0.loss_ce: 0.0212  aux_0.acc_seg: 74.0584  aux_1.loss_ce: 0.0371  aux_1.acc_seg: 61.9795
2023/02/14 00:19:49 - mmengine - INFO - Iter(train) [37800/40000]  lr: 1.0000e-04  eta: 0:03:59  time: 0.1076  data_time: 0.0036  memory: 1827  loss: 0.0974  decode.loss_ce: 0.0430  decode.acc_seg: 75.8867  aux_0.loss_ce: 0.0185  aux_0.acc_seg: 65.8903  aux_1.loss_ce: 0.0358  aux_1.acc_seg: 47.1195
2023/02/14 00:20:11 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:20:11 - mmengine - INFO - Iter(train) [38000/40000]  lr: 1.0000e-04  eta: 0:03:38  time: 0.1104  data_time: 0.0036  memory: 1826  loss: 0.0689  decode.loss_ce: 0.0271  decode.acc_seg: 91.3777  aux_0.loss_ce: 0.0127  aux_0.acc_seg: 87.7572  aux_1.loss_ce: 0.0292  aux_1.acc_seg: 76.7370
2023/02/14 00:20:11 - mmengine - INFO - Saving checkpoint at 38000 iterations
2023/02/14 00:20:15 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:17  time: 0.0140  data_time: 0.0009  memory: 96  
2023/02/14 00:20:17 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:13  time: 0.0128  data_time: 0.0007  memory: 159  
2023/02/14 00:20:20 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:11  time: 0.0114  data_time: 0.0007  memory: 109  
2023/02/14 00:20:22 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:08  time: 0.0148  data_time: 0.0006  memory: 81  
2023/02/14 00:20:24 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0118  data_time: 0.0006  memory: 77  
2023/02/14 00:20:27 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0114  data_time: 0.0007  memory: 88  
2023/02/14 00:20:29 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0128  data_time: 0.0008  memory: 83  
2023/02/14 00:20:30 - mmengine - INFO - per class results:
2023/02/14 00:20:30 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 87.65 | 96.68 |
|  aeroplane  | 47.27 | 73.09 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  5.78 |  5.97 |
|     boat    |  0.43 |  0.44 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 78.21 | 82.08 |
|     car     | 65.06 | 76.14 |
|     cat     | 44.68 | 77.61 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.18 |  0.18 |
| diningtable | 19.42 | 26.93 |
|     dog     | 16.28 | 19.79 |
|    horse    | 24.88 | 45.75 |
|  motorbike  | 43.47 | 73.42 |
|    person   | 62.95 | 78.38 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 32.66 | 54.92 |
|     sofa    | 16.64 | 22.17 |
|    train    | 64.74 | 77.04 |
|  tvmonitor  | 38.32 | 55.51 |
+-------------+-------+-------+
2023/02/14 00:20:30 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 84.4300  mIoU: 30.8800  mAcc: 41.2400
2023/02/14 00:20:52 - mmengine - INFO - Iter(train) [38200/40000]  lr: 1.0000e-04  eta: 0:03:16  time: 0.1079  data_time: 0.0034  memory: 1825  loss: 0.0938  decode.loss_ce: 0.0391  decode.acc_seg: 88.5292  aux_0.loss_ce: 0.0180  aux_0.acc_seg: 87.3235  aux_1.loss_ce: 0.0367  aux_1.acc_seg: 58.4333
2023/02/14 00:21:13 - mmengine - INFO - Iter(train) [38400/40000]  lr: 1.0000e-04  eta: 0:02:54  time: 0.1087  data_time: 0.0033  memory: 1826  loss: 0.1057  decode.loss_ce: 0.0474  decode.acc_seg: 63.1285  aux_0.loss_ce: 0.0209  aux_0.acc_seg: 61.4853  aux_1.loss_ce: 0.0375  aux_1.acc_seg: 42.8557
2023/02/14 00:21:35 - mmengine - INFO - Iter(train) [38600/40000]  lr: 1.0000e-04  eta: 0:02:32  time: 0.1112  data_time: 0.0037  memory: 1826  loss: 0.0702  decode.loss_ce: 0.0286  decode.acc_seg: 79.0094  aux_0.loss_ce: 0.0134  aux_0.acc_seg: 78.5128  aux_1.loss_ce: 0.0282  aux_1.acc_seg: 66.0152
2023/02/14 00:21:57 - mmengine - INFO - Iter(train) [38800/40000]  lr: 1.0000e-04  eta: 0:02:10  time: 0.1061  data_time: 0.0033  memory: 1827  loss: 0.0800  decode.loss_ce: 0.0344  decode.acc_seg: 83.6210  aux_0.loss_ce: 0.0148  aux_0.acc_seg: 86.6575  aux_1.loss_ce: 0.0308  aux_1.acc_seg: 69.8974
2023/02/14 00:22:19 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:22:19 - mmengine - INFO - Iter(train) [39000/40000]  lr: 1.0000e-04  eta: 0:01:49  time: 0.1082  data_time: 0.0034  memory: 1826  loss: 0.0879  decode.loss_ce: 0.0368  decode.acc_seg: 92.5166  aux_0.loss_ce: 0.0170  aux_0.acc_seg: 92.7081  aux_1.loss_ce: 0.0341  aux_1.acc_seg: 64.2634
2023/02/14 00:22:40 - mmengine - INFO - Iter(train) [39200/40000]  lr: 1.0000e-04  eta: 0:01:27  time: 0.1089  data_time: 0.0034  memory: 1827  loss: 0.0865  decode.loss_ce: 0.0366  decode.acc_seg: 84.3403  aux_0.loss_ce: 0.0164  aux_0.acc_seg: 82.4400  aux_1.loss_ce: 0.0334  aux_1.acc_seg: 80.8077
2023/02/14 00:23:02 - mmengine - INFO - Iter(train) [39400/40000]  lr: 1.0000e-04  eta: 0:01:05  time: 0.1108  data_time: 0.0037  memory: 1827  loss: 0.1081  decode.loss_ce: 0.0475  decode.acc_seg: 60.6923  aux_0.loss_ce: 0.0208  aux_0.acc_seg: 55.2894  aux_1.loss_ce: 0.0399  aux_1.acc_seg: 48.4335
2023/02/14 00:23:24 - mmengine - INFO - Iter(train) [39600/40000]  lr: 1.0000e-04  eta: 0:00:43  time: 0.1090  data_time: 0.0036  memory: 1827  loss: 0.0957  decode.loss_ce: 0.0411  decode.acc_seg: 88.7156  aux_0.loss_ce: 0.0176  aux_0.acc_seg: 90.3350  aux_1.loss_ce: 0.0370  aux_1.acc_seg: 68.8740
2023/02/14 00:23:46 - mmengine - INFO - Iter(train) [39800/40000]  lr: 1.0000e-04  eta: 0:00:21  time: 0.1090  data_time: 0.0038  memory: 1827  loss: 0.0993  decode.loss_ce: 0.0439  decode.acc_seg: 68.3205  aux_0.loss_ce: 0.0187  aux_0.acc_seg: 72.3494  aux_1.loss_ce: 0.0367  aux_1.acc_seg: 54.8783
2023/02/14 00:24:08 - mmengine - INFO - Exp name: fast_scnn_voc12_20230214_001142
2023/02/14 00:24:08 - mmengine - INFO - Iter(train) [40000/40000]  lr: 1.0000e-04  eta: 0:00:00  time: 0.1073  data_time: 0.0034  memory: 1827  loss: 0.0877  decode.loss_ce: 0.0386  decode.acc_seg: 85.8062  aux_0.loss_ce: 0.0169  aux_0.acc_seg: 83.5754  aux_1.loss_ce: 0.0322  aux_1.acc_seg: 60.5336
2023/02/14 00:24:08 - mmengine - INFO - Saving checkpoint at 40000 iterations
2023/02/14 00:24:11 - mmengine - INFO - Iter(val) [ 200/1449]    eta: 0:00:15  time: 0.0124  data_time: 0.0006  memory: 96  
2023/02/14 00:24:13 - mmengine - INFO - Iter(val) [ 400/1449]    eta: 0:00:12  time: 0.0112  data_time: 0.0008  memory: 159  
2023/02/14 00:24:16 - mmengine - INFO - Iter(val) [ 600/1449]    eta: 0:00:10  time: 0.0140  data_time: 0.0005  memory: 109  
2023/02/14 00:24:18 - mmengine - INFO - Iter(val) [ 800/1449]    eta: 0:00:07  time: 0.0111  data_time: 0.0007  memory: 81  
2023/02/14 00:24:20 - mmengine - INFO - Iter(val) [1000/1449]    eta: 0:00:05  time: 0.0110  data_time: 0.0003  memory: 77  
2023/02/14 00:24:23 - mmengine - INFO - Iter(val) [1200/1449]    eta: 0:00:03  time: 0.0115  data_time: 0.0006  memory: 88  
2023/02/14 00:24:26 - mmengine - INFO - Iter(val) [1400/1449]    eta: 0:00:00  time: 0.0154  data_time: 0.0009  memory: 83  
2023/02/14 00:24:26 - mmengine - INFO - per class results:
2023/02/14 00:24:26 - mmengine - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 87.52 | 96.66 |
|  aeroplane  | 47.18 | 72.59 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  5.14 |  5.26 |
|     boat    |  0.43 |  0.44 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 77.13 |  80.4 |
|     car     | 65.46 | 74.94 |
|     cat     | 44.04 | 79.65 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.12 |  0.12 |
| diningtable | 20.16 | 27.87 |
|     dog     | 15.94 |  19.4 |
|    horse    | 24.23 | 42.08 |
|  motorbike  | 43.83 | 71.49 |
|    person   | 63.64 | 78.53 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 32.05 | 55.74 |
|     sofa    | 16.37 | 21.64 |
|    train    | 63.94 |  77.6 |
|  tvmonitor  | 38.01 | 56.71 |
+-------------+-------+-------+
2023/02/14 00:24:26 - mmengine - INFO - Iter(val) [1449/1449]  aAcc: 84.3700  mIoU: 30.7200  mAcc: 41.0100
