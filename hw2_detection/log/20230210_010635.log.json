{"env_info": "sys.platform: win32\nPython: 3.9.16 (main, Jan 11 2023, 16:16:36) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nMSVC: Microsoft(R) C/C++ Optimizing Compiler Version 19.29.30038.1 for x64\nGCC: n/a\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/baloon/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/baloon/annotations/train.json',\n        img_prefix='data/baloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('baloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/baloon/annotations/val.json',\n        img_prefix='data/baloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('baloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/baloon/annotations/val.json',\n        img_prefix='data/baloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('baloon', )))\nevaluation = dict(metric=['bbox', 'segm'], interval=1, save_best='auto')\noptimizer = dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn/mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('baloon', )\nwork_dir = '.\\work\\baloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1569263679, "exp_name": "mask_rcnn_r50_fpn_2x_baloon.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 4e-05, "memory": 6467, "data_time": 0.92223, "loss_rpn_cls": 0.04215, "loss_rpn_bbox": 0.01207, "loss_cls": 0.79704, "acc": 23.92578, "loss_bbox": 0.28997, "loss_mask": 3.82725, "loss": 4.96849, "time": 1.95497}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 6e-05, "bbox_mAP": 0.0139, "bbox_mAP_50": 0.0489, "bbox_mAP_75": 0.0014, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.02, "bbox_mAP_l": 0.0178, "bbox_mAP_copypaste": "0.0139 0.0489 0.0014 0.0000 0.0200 0.0178", "segm_mAP": 0.0249, "segm_mAP_50": 0.0593, "segm_mAP_75": 0.0164, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.0278, "segm_mAP_l": 0.0378, "segm_mAP_copypaste": "0.0249 0.0593 0.0164 0.0252 0.0278 0.0378"}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0001, "memory": 7098, "data_time": 0.96931, "loss_rpn_cls": 0.03985, "loss_rpn_bbox": 0.01248, "loss_cls": 0.45238, "acc": 89.91699, "loss_bbox": 0.32416, "loss_mask": 0.39633, "loss": 1.22521, "time": 1.4951}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.0818, "bbox_mAP_50": 0.1436, "bbox_mAP_75": 0.0761, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0788, "bbox_mAP_l": 0.1017, "bbox_mAP_copypaste": "0.0818 0.1436 0.0761 0.0000 0.0788 0.1017", "segm_mAP": 0.1165, "segm_mAP_50": 0.146, "segm_mAP_75": 0.1322, "segm_mAP_s": 0.0031, "segm_mAP_m": 0.0677, "segm_mAP_l": 0.2067, "segm_mAP_copypaste": "0.1165 0.1460 0.1322 0.0031 0.0677 0.2067"}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00017, "memory": 7098, "data_time": 0.92403, "loss_rpn_cls": 0.04034, "loss_rpn_bbox": 0.01641, "loss_cls": 0.27974, "acc": 89.58984, "loss_bbox": 0.37086, "loss_mask": 0.22396, "loss": 0.93131, "time": 1.40344}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00019, "bbox_mAP": 0.2302, "bbox_mAP_50": 0.3159, "bbox_mAP_75": 0.2661, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1935, "bbox_mAP_l": 0.2709, "bbox_mAP_copypaste": "0.2302 0.3159 0.2661 0.0000 0.1935 0.2709", "segm_mAP": 0.2794, "segm_mAP_50": 0.3166, "segm_mAP_75": 0.3143, "segm_mAP_s": 0.0045, "segm_mAP_m": 0.1242, "segm_mAP_l": 0.4301, "segm_mAP_copypaste": "0.2794 0.3166 0.3143 0.0045 0.1242 0.4301"}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00023, "memory": 7098, "data_time": 0.8965, "loss_rpn_cls": 0.03033, "loss_rpn_bbox": 0.01141, "loss_cls": 0.23256, "acc": 89.74609, "loss_bbox": 0.3642, "loss_mask": 0.17135, "loss": 0.80985, "time": 1.37213}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00025, "bbox_mAP": 0.4901, "bbox_mAP_50": 0.6478, "bbox_mAP_75": 0.5383, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4493, "bbox_mAP_l": 0.5387, "bbox_mAP_copypaste": "0.4901 0.6478 0.5383 0.0000 0.4493 0.5387", "segm_mAP": 0.5846, "segm_mAP_50": 0.6482, "segm_mAP_75": 0.6377, "segm_mAP_s": 0.0115, "segm_mAP_m": 0.3915, "segm_mAP_l": 0.6974, "segm_mAP_copypaste": "0.5846 0.6482 0.6377 0.0115 0.3915 0.6974"}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00029, "memory": 7098, "data_time": 0.87356, "loss_rpn_cls": 0.02876, "loss_rpn_bbox": 0.01048, "loss_cls": 0.20338, "acc": 89.15527, "loss_bbox": 0.38644, "loss_mask": 0.10283, "loss": 0.73188, "time": 1.36944}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00032, "bbox_mAP": 0.6117, "bbox_mAP_50": 0.8128, "bbox_mAP_75": 0.6683, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6331, "bbox_mAP_l": 0.6562, "bbox_mAP_copypaste": "0.6117 0.8128 0.6683 0.0000 0.6331 0.6562", "segm_mAP": 0.7381, "segm_mAP_50": 0.8105, "segm_mAP_75": 0.7982, "segm_mAP_s": 0.0112, "segm_mAP_m": 0.6549, "segm_mAP_l": 0.8069, "segm_mAP_copypaste": "0.7381 0.8105 0.7982 0.0112 0.6549 0.8069"}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00036, "memory": 7098, "data_time": 0.89491, "loss_rpn_cls": 0.02313, "loss_rpn_bbox": 0.01259, "loss_cls": 0.18391, "acc": 90.05371, "loss_bbox": 0.4115, "loss_mask": 0.10386, "loss": 0.735, "time": 1.36724}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00038, "bbox_mAP": 0.6073, "bbox_mAP_50": 0.8253, "bbox_mAP_75": 0.6545, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6813, "bbox_mAP_l": 0.6371, "bbox_mAP_copypaste": "0.6073 0.8253 0.6545 0.0000 0.6813 0.6371", "segm_mAP": 0.7518, "segm_mAP_50": 0.8252, "segm_mAP_75": 0.8144, "segm_mAP_s": 0.018, "segm_mAP_m": 0.715, "segm_mAP_l": 0.814, "segm_mAP_copypaste": "0.7518 0.8252 0.8144 0.0180 0.7150 0.8140"}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00042, "memory": 7098, "data_time": 0.8958, "loss_rpn_cls": 0.01727, "loss_rpn_bbox": 0.01029, "loss_cls": 0.13955, "acc": 95.14648, "loss_bbox": 0.34359, "loss_mask": 0.09597, "loss": 0.60667, "time": 1.36624}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00045, "bbox_mAP": 0.6376, "bbox_mAP_50": 0.8444, "bbox_mAP_75": 0.7487, "bbox_mAP_s": 0.0047, "bbox_mAP_m": 0.702, "bbox_mAP_l": 0.6637, "bbox_mAP_copypaste": "0.6376 0.8444 0.7487 0.0047 0.7020 0.6637", "segm_mAP": 0.7786, "segm_mAP_50": 0.8453, "segm_mAP_75": 0.8412, "segm_mAP_s": 0.0243, "segm_mAP_m": 0.7421, "segm_mAP_l": 0.8315, "segm_mAP_copypaste": "0.7786 0.8453 0.8412 0.0243 0.7421 0.8315"}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00049, "memory": 7098, "data_time": 0.88733, "loss_rpn_cls": 0.01371, "loss_rpn_bbox": 0.01202, "loss_cls": 0.12089, "acc": 96.16211, "loss_bbox": 0.31007, "loss_mask": 0.1006, "loss": 0.55728, "time": 1.38099}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00051, "bbox_mAP": 0.6807, "bbox_mAP_50": 0.8646, "bbox_mAP_75": 0.7955, "bbox_mAP_s": 0.0168, "bbox_mAP_m": 0.6958, "bbox_mAP_l": 0.7212, "bbox_mAP_copypaste": "0.6807 0.8646 0.7955 0.0168 0.6958 0.7212", "segm_mAP": 0.7971, "segm_mAP_50": 0.8625, "segm_mAP_75": 0.8577, "segm_mAP_s": 0.0316, "segm_mAP_m": 0.7511, "segm_mAP_l": 0.8508, "segm_mAP_copypaste": "0.7971 0.8625 0.8577 0.0316 0.7511 0.8508"}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00055, "memory": 7098, "data_time": 0.87845, "loss_rpn_cls": 0.0091, "loss_rpn_bbox": 0.0113, "loss_cls": 0.09369, "acc": 96.97266, "loss_bbox": 0.23273, "loss_mask": 0.1008, "loss": 0.44762, "time": 1.36265}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00057, "bbox_mAP": 0.7432, "bbox_mAP_50": 0.8762, "bbox_mAP_75": 0.844, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.7115, "bbox_mAP_l": 0.8001, "bbox_mAP_copypaste": "0.7432 0.8762 0.8440 0.0505 0.7115 0.8001", "segm_mAP": 0.8131, "segm_mAP_50": 0.8733, "segm_mAP_75": 0.8665, "segm_mAP_s": 0.0361, "segm_mAP_m": 0.7593, "segm_mAP_l": 0.869, "segm_mAP_copypaste": "0.8131 0.8733 0.8665 0.0361 0.7593 0.8690"}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00061, "memory": 7098, "data_time": 0.90009, "loss_rpn_cls": 0.00695, "loss_rpn_bbox": 0.00991, "loss_cls": 0.07812, "acc": 97.1582, "loss_bbox": 0.12304, "loss_mask": 0.09184, "loss": 0.30986, "time": 1.37941}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00064, "bbox_mAP": 0.7359, "bbox_mAP_50": 0.8911, "bbox_mAP_75": 0.8613, "bbox_mAP_s": 0.0737, "bbox_mAP_m": 0.6568, "bbox_mAP_l": 0.7949, "bbox_mAP_copypaste": "0.7359 0.8911 0.8613 0.0737 0.6568 0.7949", "segm_mAP": 0.8041, "segm_mAP_50": 0.8807, "segm_mAP_75": 0.8712, "segm_mAP_s": 0.0524, "segm_mAP_m": 0.7344, "segm_mAP_l": 0.8573, "segm_mAP_copypaste": "0.8041 0.8807 0.8712 0.0524 0.7344 0.8573"}
{"mode": "train", "epoch": 11, "iter": 10, "lr": 0.00068, "memory": 7098, "data_time": 0.8967, "loss_rpn_cls": 0.00785, "loss_rpn_bbox": 0.01304, "loss_cls": 0.08239, "acc": 97.05078, "loss_bbox": 0.12368, "loss_mask": 0.09397, "loss": 0.32093, "time": 1.39606}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.0007, "bbox_mAP": 0.7777, "bbox_mAP_50": 0.8986, "bbox_mAP_75": 0.8637, "bbox_mAP_s": 0.1119, "bbox_mAP_m": 0.6857, "bbox_mAP_l": 0.8438, "bbox_mAP_copypaste": "0.7777 0.8986 0.8637 0.1119 0.6857 0.8438", "segm_mAP": 0.8227, "segm_mAP_50": 0.8843, "segm_mAP_75": 0.8818, "segm_mAP_s": 0.0577, "segm_mAP_m": 0.7462, "segm_mAP_l": 0.8782, "segm_mAP_copypaste": "0.8227 0.8843 0.8818 0.0577 0.7462 0.8782"}
{"mode": "train", "epoch": 12, "iter": 10, "lr": 0.00074, "memory": 7098, "data_time": 0.88922, "loss_rpn_cls": 0.0089, "loss_rpn_bbox": 0.01046, "loss_cls": 0.07433, "acc": 97.31934, "loss_bbox": 0.0959, "loss_mask": 0.08708, "loss": 0.27667, "time": 1.37911}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7826, "bbox_mAP_50": 0.8973, "bbox_mAP_75": 0.8713, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.712, "bbox_mAP_l": 0.8468, "bbox_mAP_copypaste": "0.7826 0.8973 0.8713 0.0757 0.7120 0.8468", "segm_mAP": 0.8233, "segm_mAP_50": 0.8973, "segm_mAP_75": 0.8827, "segm_mAP_s": 0.0379, "segm_mAP_m": 0.7479, "segm_mAP_l": 0.882, "segm_mAP_copypaste": "0.8233 0.8973 0.8827 0.0379 0.7479 0.8820"}
{"mode": "train", "epoch": 13, "iter": 10, "lr": 0.00081, "memory": 7098, "data_time": 0.89491, "loss_rpn_cls": 0.00703, "loss_rpn_bbox": 0.0112, "loss_cls": 0.06631, "acc": 97.5, "loss_bbox": 0.08985, "loss_mask": 0.08596, "loss": 0.26034, "time": 1.37941}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.00083, "bbox_mAP": 0.7771, "bbox_mAP_50": 0.8975, "bbox_mAP_75": 0.8715, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.704, "bbox_mAP_l": 0.8404, "bbox_mAP_copypaste": "0.7771 0.8975 0.8715 0.0757 0.7040 0.8404", "segm_mAP": 0.8246, "segm_mAP_50": 0.8975, "segm_mAP_75": 0.8829, "segm_mAP_s": 0.0337, "segm_mAP_m": 0.74, "segm_mAP_l": 0.8841, "segm_mAP_copypaste": "0.8246 0.8975 0.8829 0.0337 0.7400 0.8841"}
{"mode": "train", "epoch": 14, "iter": 10, "lr": 0.00087, "memory": 7098, "data_time": 0.89311, "loss_rpn_cls": 0.00565, "loss_rpn_bbox": 0.00562, "loss_cls": 0.04772, "acc": 98.27148, "loss_bbox": 0.05998, "loss_mask": 0.06587, "loss": 0.18484, "time": 1.37482}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.00089, "bbox_mAP": 0.7699, "bbox_mAP_50": 0.9103, "bbox_mAP_75": 0.8799, "bbox_mAP_s": 0.1505, "bbox_mAP_m": 0.7054, "bbox_mAP_l": 0.8243, "bbox_mAP_copypaste": "0.7699 0.9103 0.8799 0.1505 0.7054 0.8243", "segm_mAP": 0.8271, "segm_mAP_50": 0.9103, "segm_mAP_75": 0.8852, "segm_mAP_s": 0.0742, "segm_mAP_m": 0.7403, "segm_mAP_l": 0.8834, "segm_mAP_copypaste": "0.8271 0.9103 0.8852 0.0742 0.7403 0.8834"}
{"mode": "train", "epoch": 15, "iter": 10, "lr": 0.00093, "memory": 7098, "data_time": 0.87177, "loss_rpn_cls": 0.00746, "loss_rpn_bbox": 0.00846, "loss_cls": 0.05405, "acc": 97.93945, "loss_bbox": 0.07552, "loss_mask": 0.07776, "loss": 0.22324, "time": 1.35458}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.00096, "bbox_mAP": 0.7898, "bbox_mAP_50": 0.9143, "bbox_mAP_75": 0.8833, "bbox_mAP_s": 0.1922, "bbox_mAP_m": 0.7238, "bbox_mAP_l": 0.842, "bbox_mAP_copypaste": "0.7898 0.9143 0.8833 0.1922 0.7238 0.8420", "segm_mAP": 0.8214, "segm_mAP_50": 0.8916, "segm_mAP_75": 0.888, "segm_mAP_s": 0.0742, "segm_mAP_m": 0.739, "segm_mAP_l": 0.8772, "segm_mAP_copypaste": "0.8214 0.8916 0.8880 0.0742 0.7390 0.8772"}
{"mode": "train", "epoch": 16, "iter": 10, "lr": 0.001, "memory": 7098, "data_time": 0.89441, "loss_rpn_cls": 0.00528, "loss_rpn_bbox": 0.00711, "loss_cls": 0.05159, "acc": 98.08105, "loss_bbox": 0.06997, "loss_mask": 0.07115, "loss": 0.2051, "time": 1.37951}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.00102, "bbox_mAP": 0.7954, "bbox_mAP_50": 0.9142, "bbox_mAP_75": 0.8837, "bbox_mAP_s": 0.2379, "bbox_mAP_m": 0.7027, "bbox_mAP_l": 0.8557, "bbox_mAP_copypaste": "0.7954 0.9142 0.8837 0.2379 0.7027 0.8557", "segm_mAP": 0.8269, "segm_mAP_50": 0.8908, "segm_mAP_75": 0.8869, "segm_mAP_s": 0.0926, "segm_mAP_m": 0.7479, "segm_mAP_l": 0.8831, "segm_mAP_copypaste": "0.8269 0.8908 0.8869 0.0926 0.7479 0.8831"}
{"mode": "train", "epoch": 17, "iter": 10, "lr": 0.00011, "memory": 7098, "data_time": 0.91385, "loss_rpn_cls": 0.00419, "loss_rpn_bbox": 0.00786, "loss_cls": 0.05534, "acc": 97.92969, "loss_bbox": 0.06912, "loss_mask": 0.07234, "loss": 0.20885, "time": 1.39646}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.00011, "bbox_mAP": 0.7926, "bbox_mAP_50": 0.915, "bbox_mAP_75": 0.8844, "bbox_mAP_s": 0.2379, "bbox_mAP_m": 0.7124, "bbox_mAP_l": 0.8499, "bbox_mAP_copypaste": "0.7926 0.9150 0.8844 0.2379 0.7124 0.8499", "segm_mAP": 0.8288, "segm_mAP_50": 0.8915, "segm_mAP_75": 0.8876, "segm_mAP_s": 0.0926, "segm_mAP_m": 0.744, "segm_mAP_l": 0.8863, "segm_mAP_copypaste": "0.8288 0.8915 0.8876 0.0926 0.7440 0.8863"}
{"mode": "train", "epoch": 18, "iter": 10, "lr": 0.00011, "memory": 7098, "data_time": 0.8957, "loss_rpn_cls": 0.00303, "loss_rpn_bbox": 0.00837, "loss_cls": 0.05595, "acc": 97.73438, "loss_bbox": 0.07534, "loss_mask": 0.07794, "loss": 0.22064, "time": 1.34311}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.00011, "bbox_mAP": 0.7959, "bbox_mAP_50": 0.915, "bbox_mAP_75": 0.8845, "bbox_mAP_s": 0.2379, "bbox_mAP_m": 0.7146, "bbox_mAP_l": 0.8547, "bbox_mAP_copypaste": "0.7959 0.9150 0.8845 0.2379 0.7146 0.8547", "segm_mAP": 0.8305, "segm_mAP_50": 0.915, "segm_mAP_75": 0.8879, "segm_mAP_s": 0.1063, "segm_mAP_m": 0.7458, "segm_mAP_l": 0.8871, "segm_mAP_copypaste": "0.8305 0.9150 0.8879 0.1063 0.7458 0.8871"}
{"mode": "train", "epoch": 19, "iter": 10, "lr": 0.00012, "memory": 7098, "data_time": 0.87526, "loss_rpn_cls": 0.0021, "loss_rpn_bbox": 0.0052, "loss_cls": 0.04369, "acc": 98.38379, "loss_bbox": 0.05159, "loss_mask": 0.07039, "loss": 0.17296, "time": 1.29823}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.00012, "bbox_mAP": 0.7994, "bbox_mAP_50": 0.9153, "bbox_mAP_75": 0.8848, "bbox_mAP_s": 0.2379, "bbox_mAP_m": 0.7146, "bbox_mAP_l": 0.8593, "bbox_mAP_copypaste": "0.7994 0.9153 0.8848 0.2379 0.7146 0.8593", "segm_mAP": 0.8309, "segm_mAP_50": 0.9153, "segm_mAP_75": 0.8879, "segm_mAP_s": 0.0926, "segm_mAP_m": 0.7464, "segm_mAP_l": 0.887, "segm_mAP_copypaste": "0.8309 0.9153 0.8879 0.0926 0.7464 0.8870"}
{"mode": "train", "epoch": 20, "iter": 10, "lr": 0.00013, "memory": 7098, "data_time": 0.86698, "loss_rpn_cls": 0.00308, "loss_rpn_bbox": 0.00812, "loss_cls": 0.05525, "acc": 97.95898, "loss_bbox": 0.07195, "loss_mask": 0.08088, "loss": 0.21927, "time": 1.3075}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7957, "bbox_mAP_50": 0.9148, "bbox_mAP_75": 0.8842, "bbox_mAP_s": 0.2379, "bbox_mAP_m": 0.7021, "bbox_mAP_l": 0.8569, "bbox_mAP_copypaste": "0.7957 0.9148 0.8842 0.2379 0.7021 0.8569", "segm_mAP": 0.831, "segm_mAP_50": 0.9148, "segm_mAP_75": 0.8874, "segm_mAP_s": 0.1063, "segm_mAP_m": 0.7464, "segm_mAP_l": 0.8871, "segm_mAP_copypaste": "0.8310 0.9148 0.8874 0.1063 0.7464 0.8871"}
{"mode": "train", "epoch": 21, "iter": 10, "lr": 0.00013, "memory": 7098, "data_time": 0.87316, "loss_rpn_cls": 0.00271, "loss_rpn_bbox": 0.00582, "loss_cls": 0.04372, "acc": 98.38867, "loss_bbox": 0.05725, "loss_mask": 0.0631, "loss": 0.1726, "time": 1.31009}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.00013, "bbox_mAP": 0.7956, "bbox_mAP_50": 0.914, "bbox_mAP_75": 0.8828, "bbox_mAP_s": 0.3172, "bbox_mAP_m": 0.693, "bbox_mAP_l": 0.8603, "bbox_mAP_copypaste": "0.7956 0.9140 0.8828 0.3172 0.6930 0.8603", "segm_mAP": 0.8281, "segm_mAP_50": 0.914, "segm_mAP_75": 0.8867, "segm_mAP_s": 0.1174, "segm_mAP_m": 0.7411, "segm_mAP_l": 0.8859, "segm_mAP_copypaste": "0.8281 0.9140 0.8867 0.1174 0.7411 0.8859"}
{"mode": "train", "epoch": 22, "iter": 10, "lr": 0.00014, "memory": 7098, "data_time": 0.87376, "loss_rpn_cls": 0.00515, "loss_rpn_bbox": 0.00593, "loss_cls": 0.04436, "acc": 98.30078, "loss_bbox": 0.05174, "loss_mask": 0.05907, "loss": 0.16624, "time": 1.31189}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.00014, "bbox_mAP": 0.7903, "bbox_mAP_50": 0.9145, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.3172, "bbox_mAP_m": 0.693, "bbox_mAP_l": 0.8515, "bbox_mAP_copypaste": "0.7903 0.9145 0.8830 0.3172 0.6930 0.8515", "segm_mAP": 0.828, "segm_mAP_50": 0.9145, "segm_mAP_75": 0.8869, "segm_mAP_s": 0.1015, "segm_mAP_m": 0.7411, "segm_mAP_l": 0.8861, "segm_mAP_copypaste": "0.8280 0.9145 0.8869 0.1015 0.7411 0.8861"}
{"mode": "train", "epoch": 23, "iter": 10, "lr": 1e-05, "memory": 7098, "data_time": 0.90059, "loss_rpn_cls": 0.00426, "loss_rpn_bbox": 0.00692, "loss_cls": 0.04709, "acc": 98.26172, "loss_bbox": 0.05859, "loss_mask": 0.06756, "loss": 0.18442, "time": 1.32934}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7956, "bbox_mAP_50": 0.9145, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.3172, "bbox_mAP_m": 0.693, "bbox_mAP_l": 0.86, "bbox_mAP_copypaste": "0.7956 0.9145 0.8830 0.3172 0.6930 0.8600", "segm_mAP": 0.8298, "segm_mAP_50": 0.9145, "segm_mAP_75": 0.8869, "segm_mAP_s": 0.1015, "segm_mAP_m": 0.7441, "segm_mAP_l": 0.8861, "segm_mAP_copypaste": "0.8298 0.9145 0.8869 0.1015 0.7441 0.8861"}
{"mode": "train", "epoch": 24, "iter": 10, "lr": 2e-05, "memory": 7098, "data_time": 0.87965, "loss_rpn_cls": 0.00397, "loss_rpn_bbox": 0.00605, "loss_cls": 0.0452, "acc": 98.37402, "loss_bbox": 0.05703, "loss_mask": 0.0689, "loss": 0.18116, "time": 1.31658}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 2e-05, "bbox_mAP": 0.7998, "bbox_mAP_50": 0.9145, "bbox_mAP_75": 0.883, "bbox_mAP_s": 0.3172, "bbox_mAP_m": 0.7106, "bbox_mAP_l": 0.8598, "bbox_mAP_copypaste": "0.7998 0.9145 0.8830 0.3172 0.7106 0.8598", "segm_mAP": 0.8279, "segm_mAP_50": 0.9145, "segm_mAP_75": 0.887, "segm_mAP_s": 0.1015, "segm_mAP_m": 0.7411, "segm_mAP_l": 0.8859, "segm_mAP_copypaste": "0.8279 0.9145 0.8870 0.1015 0.7411 0.8859"}
